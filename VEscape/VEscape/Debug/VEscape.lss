
VEscape.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000450  00800100  0000196c  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000196c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  00800550  00800550  00001e50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001177  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00003147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e3  00000000  00000000  00003a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d5  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ee  00000000  00000000  000057c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000061b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c3       	rjmp	.+1698   	; 0x6c8 <__vector_9>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	f9 e1       	ldi	r31, 0x19	; 25
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 35       	cpi	r26, 0x50	; 80
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a0 e5       	ldi	r26, 0x50	; 80
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3a       	cpi	r26, 0xA5	; 165
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <main>
      c6:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <initUSART>:
//Parameter: None
//Returns: 1 if full else 0
unsigned char QueueIsFull(Queue Q) 
{
	return (Q->num_objects == Q->capacity);
}
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	1f 92       	push	r1
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	e1 f0       	breq	.+56     	; 0x116 <initUSART+0x4a>
      de:	81 ec       	ldi	r24, 0xC1	; 193
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	21 ec       	ldi	r18, 0xC1	; 193
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	f9 01       	movw	r30, r18
      e8:	20 81       	ld	r18, Z
      ea:	28 61       	ori	r18, 0x18	; 24
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
      f0:	82 ec       	ldi	r24, 0xC2	; 194
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	22 ec       	ldi	r18, 0xC2	; 194
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	26 60       	ori	r18, 0x06	; 6
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
     102:	84 ec       	ldi	r24, 0xC4	; 196
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2f ec       	ldi	r18, 0xCF	; 207
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
     10c:	85 ec       	ldi	r24, 0xC5	; 197
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	fc 01       	movw	r30, r24
     112:	10 82       	st	Z, r1
     114:	1b c0       	rjmp	.+54     	; 0x14c <initUSART+0x80>
     116:	89 ec       	ldi	r24, 0xC9	; 201
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	29 ec       	ldi	r18, 0xC9	; 201
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	20 81       	ld	r18, Z
     122:	28 61       	ori	r18, 0x18	; 24
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	8a ec       	ldi	r24, 0xCA	; 202
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	2a ec       	ldi	r18, 0xCA	; 202
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	26 60       	ori	r18, 0x06	; 6
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	8c ec       	ldi	r24, 0xCC	; 204
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	2f ec       	ldi	r18, 0xCF	; 207
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
     144:	8d ec       	ldi	r24, 0xCD	; 205
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	10 82       	st	Z, r1
     14c:	00 00       	nop
     14e:	0f 90       	pop	r0
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <USART_IsSendReady>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	1f 92       	push	r1
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	31 f0       	breq	.+12     	; 0x174 <USART_IsSendReady+0x1e>
     168:	80 ec       	ldi	r24, 0xC0	; 192
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	80 72       	andi	r24, 0x20	; 32
     172:	05 c0       	rjmp	.+10     	; 0x17e <USART_IsSendReady+0x28>
     174:	88 ec       	ldi	r24, 0xC8	; 200
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	80 81       	ld	r24, Z
     17c:	80 72       	andi	r24, 0x20	; 32
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <USART_HasTransmitted>:
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	1f 92       	push	r1
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	31 f0       	breq	.+12     	; 0x1a4 <USART_HasTransmitted+0x1e>
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	80 74       	andi	r24, 0x40	; 64
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <USART_HasTransmitted+0x28>
     1a4:	88 ec       	ldi	r24, 0xC8	; 200
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	80 74       	andi	r24, 0x40	; 64
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <USART_Flush>:
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	e1 f0       	breq	.+56     	; 0x200 <USART_Flush+0x4a>
     1c8:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <dummy.1630>
     1cc:	88 23       	and	r24, r24
     1ce:	59 f4       	brne	.+22     	; 0x1e6 <USART_Flush+0x30>
     1d0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <dummy.1630>
     1d4:	88 23       	and	r24, r24
     1d6:	a1 f4       	brne	.+40     	; 0x200 <USART_Flush+0x4a>
     1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <USART_Flush+0x30>
     1da:	86 ec       	ldi	r24, 0xC6	; 198
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <dummy.1630>
     1e6:	80 ec       	ldi	r24, 0xC0	; 192
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	fc 01       	movw	r30, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	88 23       	and	r24, r24
     1f0:	a4 f3       	brlt	.-24     	; 0x1da <USART_Flush+0x24>
     1f2:	0c c0       	rjmp	.+24     	; 0x20c <USART_Flush+0x56>
     1f4:	8e ec       	ldi	r24, 0xCE	; 206
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <dummy.1630>
     200:	88 ec       	ldi	r24, 0xC8	; 200
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	fc 01       	movw	r30, r24
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	a4 f3       	brlt	.-24     	; 0x1f4 <USART_Flush+0x3e>
     20c:	00 00       	nop
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <USART_Send>:
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	00 d0       	rcall	.+0      	; 0x21c <USART_Send+0x6>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	6a 83       	std	Y+2, r22	; 0x02
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	89 f0       	breq	.+34     	; 0x24c <USART_Send+0x36>
     22a:	00 00       	nop
     22c:	80 ec       	ldi	r24, 0xC0	; 192
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	80 72       	andi	r24, 0x20	; 32
     23a:	99 27       	eor	r25, r25
     23c:	89 2b       	or	r24, r25
     23e:	b1 f3       	breq	.-20     	; 0x22c <USART_Send+0x16>
     240:	86 ec       	ldi	r24, 0xC6	; 198
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	29 81       	ldd	r18, Y+1	; 0x01
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
     24a:	10 c0       	rjmp	.+32     	; 0x26c <USART_Send+0x56>
     24c:	00 00       	nop
     24e:	88 ec       	ldi	r24, 0xC8	; 200
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 72       	andi	r24, 0x20	; 32
     25c:	99 27       	eor	r25, r25
     25e:	89 2b       	or	r24, r25
     260:	b1 f3       	breq	.-20     	; 0x24e <USART_Send+0x38>
     262:	8e ec       	ldi	r24, 0xCE	; 206
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	29 81       	ldd	r18, Y+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	00 00       	nop
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <joystickInit>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	8a e7       	ldi	r24, 0x7A	; 122
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	2a e7       	ldi	r18, 0x7A	; 122
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	20 6c       	ori	r18, 0xC0	; 192
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
     292:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <xAxis+0x1>
     296:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <xAxis>
     29a:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <yAxis+0x1>
     29e:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <yAxis>
     2a2:	00 00       	nop
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <joystickSample>:
     2aa:	2f 92       	push	r2
     2ac:	3f 92       	push	r3
     2ae:	4f 92       	push	r4
     2b0:	5f 92       	push	r5
     2b2:	6f 92       	push	r6
     2b4:	7f 92       	push	r7
     2b6:	8f 92       	push	r8
     2b8:	9f 92       	push	r9
     2ba:	af 92       	push	r10
     2bc:	bf 92       	push	r11
     2be:	cf 92       	push	r12
     2c0:	df 92       	push	r13
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	af 97       	sbiw	r28, 0x2f	; 47
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	2a e7       	ldi	r18, 0x7A	; 122
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	8a e7       	ldi	r24, 0x7A	; 122
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	80 64       	ori	r24, 0x40	; 64
     2ec:	f9 01       	movw	r30, r18
     2ee:	80 83       	st	Z, r24
     2f0:	00 00       	nop
     2f2:	8a e7       	ldi	r24, 0x7A	; 122
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	88 2f       	mov	r24, r24
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	80 74       	andi	r24, 0x40	; 64
     300:	99 27       	eor	r25, r25
     302:	89 2b       	or	r24, r25
     304:	b1 f7       	brne	.-20     	; 0x2f2 <joystickSample+0x48>
     306:	88 e7       	ldi	r24, 0x78	; 120
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <xAxis+0x1>
     314:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <xAxis>
     318:	2c e7       	ldi	r18, 0x7C	; 124
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	8c e7       	ldi	r24, 0x7C	; 124
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	81 60       	ori	r24, 0x01	; 1
     326:	f9 01       	movw	r30, r18
     328:	80 83       	st	Z, r24
     32a:	2a e7       	ldi	r18, 0x7A	; 122
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	8a e7       	ldi	r24, 0x7A	; 122
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	80 64       	ori	r24, 0x40	; 64
     338:	f9 01       	movw	r30, r18
     33a:	80 83       	st	Z, r24
     33c:	00 00       	nop
     33e:	8a e7       	ldi	r24, 0x7A	; 122
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 74       	andi	r24, 0x40	; 64
     34c:	99 27       	eor	r25, r25
     34e:	89 2b       	or	r24, r25
     350:	b1 f7       	brne	.-20     	; 0x33e <joystickSample+0x94>
     352:	88 e7       	ldi	r24, 0x78	; 120
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	91 81       	ldd	r25, Z+1	; 0x01
     35c:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <yAxis+0x1>
     360:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <yAxis>
     364:	2c e7       	ldi	r18, 0x7C	; 124
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	8c e7       	ldi	r24, 0x7C	; 124
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	8e 7f       	andi	r24, 0xFE	; 254
     372:	f9 01       	movw	r30, r18
     374:	80 83       	st	Z, r24
     376:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xAxis>
     37a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xAxis+0x1>
     37e:	80 5f       	subi	r24, 0xF0	; 240
     380:	91 40       	sbci	r25, 0x01	; 1
     382:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <xAxis+0x1>
     386:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <xAxis>
     38a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <yAxis>
     38e:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <yAxis+0x1>
     392:	8c 50       	subi	r24, 0x0C	; 12
     394:	92 40       	sbci	r25, 0x02	; 2
     396:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <yAxis+0x1>
     39a:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <yAxis>
     39e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xAxis>
     3a2:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xAxis+0x1>
     3a6:	99 8b       	std	Y+17, r25	; 0x11
     3a8:	88 8b       	std	Y+16, r24	; 0x10
     3aa:	89 2f       	mov	r24, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	88 0b       	sbc	r24, r24
     3b0:	8a 8b       	std	Y+18, r24	; 0x12
     3b2:	8b 8b       	std	Y+19, r24	; 0x13
     3b4:	8c 8b       	std	Y+20, r24	; 0x14
     3b6:	8d 8b       	std	Y+21, r24	; 0x15
     3b8:	8e 8b       	std	Y+22, r24	; 0x16
     3ba:	8f 8b       	std	Y+23, r24	; 0x17
     3bc:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xAxis>
     3c0:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xAxis+0x1>
     3c4:	1c 01       	movw	r2, r24
     3c6:	89 2f       	mov	r24, r25
     3c8:	88 0f       	add	r24, r24
     3ca:	88 0b       	sbc	r24, r24
     3cc:	48 2e       	mov	r4, r24
     3ce:	58 2e       	mov	r5, r24
     3d0:	68 2e       	mov	r6, r24
     3d2:	78 2e       	mov	r7, r24
     3d4:	88 2e       	mov	r8, r24
     3d6:	98 2e       	mov	r9, r24
     3d8:	a2 2c       	mov	r10, r2
     3da:	b3 2c       	mov	r11, r3
     3dc:	c4 2c       	mov	r12, r4
     3de:	d5 2c       	mov	r13, r5
     3e0:	e6 2c       	mov	r14, r6
     3e2:	f7 2c       	mov	r15, r7
     3e4:	08 2d       	mov	r16, r8
     3e6:	19 2d       	mov	r17, r9
     3e8:	28 89       	ldd	r18, Y+16	; 0x10
     3ea:	39 89       	ldd	r19, Y+17	; 0x11
     3ec:	4a 89       	ldd	r20, Y+18	; 0x12
     3ee:	5b 89       	ldd	r21, Y+19	; 0x13
     3f0:	6c 89       	ldd	r22, Y+20	; 0x14
     3f2:	7d 89       	ldd	r23, Y+21	; 0x15
     3f4:	8e 89       	ldd	r24, Y+22	; 0x16
     3f6:	9f 89       	ldd	r25, Y+23	; 0x17
     3f8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__muldi3>
     3fc:	a2 2e       	mov	r10, r18
     3fe:	b3 2e       	mov	r11, r19
     400:	c4 2e       	mov	r12, r20
     402:	d5 2e       	mov	r13, r21
     404:	e6 2e       	mov	r14, r22
     406:	f7 2e       	mov	r15, r23
     408:	08 2f       	mov	r16, r24
     40a:	19 2f       	mov	r17, r25
     40c:	a8 8e       	std	Y+24, r10	; 0x18
     40e:	b9 8e       	std	Y+25, r11	; 0x19
     410:	ca 8e       	std	Y+26, r12	; 0x1a
     412:	db 8e       	std	Y+27, r13	; 0x1b
     414:	ec 8e       	std	Y+28, r14	; 0x1c
     416:	fd 8e       	std	Y+29, r15	; 0x1d
     418:	0e 8f       	std	Y+30, r16	; 0x1e
     41a:	1f 8f       	std	Y+31, r17	; 0x1f
     41c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <yAxis>
     420:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <yAxis+0x1>
     424:	99 a3       	std	Y+33, r25	; 0x21
     426:	88 a3       	std	Y+32, r24	; 0x20
     428:	89 2f       	mov	r24, r25
     42a:	88 0f       	add	r24, r24
     42c:	88 0b       	sbc	r24, r24
     42e:	8a a3       	std	Y+34, r24	; 0x22
     430:	8b a3       	std	Y+35, r24	; 0x23
     432:	8c a3       	std	Y+36, r24	; 0x24
     434:	8d a3       	std	Y+37, r24	; 0x25
     436:	8e a3       	std	Y+38, r24	; 0x26
     438:	8f a3       	std	Y+39, r24	; 0x27
     43a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <yAxis>
     43e:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <yAxis+0x1>
     442:	99 a7       	std	Y+41, r25	; 0x29
     444:	88 a7       	std	Y+40, r24	; 0x28
     446:	89 2f       	mov	r24, r25
     448:	88 0f       	add	r24, r24
     44a:	88 0b       	sbc	r24, r24
     44c:	8a a7       	std	Y+42, r24	; 0x2a
     44e:	8b a7       	std	Y+43, r24	; 0x2b
     450:	8c a7       	std	Y+44, r24	; 0x2c
     452:	8d a7       	std	Y+45, r24	; 0x2d
     454:	8e a7       	std	Y+46, r24	; 0x2e
     456:	8f a7       	std	Y+47, r24	; 0x2f
     458:	a8 a4       	ldd	r10, Y+40	; 0x28
     45a:	b9 a4       	ldd	r11, Y+41	; 0x29
     45c:	ca a4       	ldd	r12, Y+42	; 0x2a
     45e:	db a4       	ldd	r13, Y+43	; 0x2b
     460:	ec a4       	ldd	r14, Y+44	; 0x2c
     462:	fd a4       	ldd	r15, Y+45	; 0x2d
     464:	0e a5       	ldd	r16, Y+46	; 0x2e
     466:	1f a5       	ldd	r17, Y+47	; 0x2f
     468:	28 a1       	ldd	r18, Y+32	; 0x20
     46a:	39 a1       	ldd	r19, Y+33	; 0x21
     46c:	4a a1       	ldd	r20, Y+34	; 0x22
     46e:	5b a1       	ldd	r21, Y+35	; 0x23
     470:	6c a1       	ldd	r22, Y+36	; 0x24
     472:	7d a1       	ldd	r23, Y+37	; 0x25
     474:	8e a1       	ldd	r24, Y+38	; 0x26
     476:	9f a1       	ldd	r25, Y+39	; 0x27
     478:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__muldi3>
     47c:	a2 2e       	mov	r10, r18
     47e:	b3 2e       	mov	r11, r19
     480:	c4 2e       	mov	r12, r20
     482:	d5 2e       	mov	r13, r21
     484:	e6 2e       	mov	r14, r22
     486:	f7 2e       	mov	r15, r23
     488:	08 2f       	mov	r16, r24
     48a:	19 2f       	mov	r17, r25
     48c:	2a 2c       	mov	r2, r10
     48e:	3b 2c       	mov	r3, r11
     490:	4c 2c       	mov	r4, r12
     492:	5d 2c       	mov	r5, r13
     494:	6e 2c       	mov	r6, r14
     496:	7f 2c       	mov	r7, r15
     498:	80 2e       	mov	r8, r16
     49a:	91 2e       	mov	r9, r17
     49c:	28 8d       	ldd	r18, Y+24	; 0x18
     49e:	39 8d       	ldd	r19, Y+25	; 0x19
     4a0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     4a2:	5b 8d       	ldd	r21, Y+27	; 0x1b
     4a4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     4a6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     4a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4ac:	a2 2c       	mov	r10, r2
     4ae:	b3 2c       	mov	r11, r3
     4b0:	c4 2c       	mov	r12, r4
     4b2:	d5 2c       	mov	r13, r5
     4b4:	e6 2c       	mov	r14, r6
     4b6:	f7 2c       	mov	r15, r7
     4b8:	08 2d       	mov	r16, r8
     4ba:	19 2d       	mov	r17, r9
     4bc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__adddi3>
     4c0:	a2 2e       	mov	r10, r18
     4c2:	b3 2e       	mov	r11, r19
     4c4:	c4 2e       	mov	r12, r20
     4c6:	d5 2e       	mov	r13, r21
     4c8:	e6 2e       	mov	r14, r22
     4ca:	f7 2e       	mov	r15, r23
     4cc:	08 2f       	mov	r16, r24
     4ce:	19 2f       	mov	r17, r25
     4d0:	2a 2d       	mov	r18, r10
     4d2:	3b 2d       	mov	r19, r11
     4d4:	4c 2d       	mov	r20, r12
     4d6:	5d 2d       	mov	r21, r13
     4d8:	6e 2d       	mov	r22, r14
     4da:	7f 2d       	mov	r23, r15
     4dc:	80 2f       	mov	r24, r16
     4de:	91 2f       	mov	r25, r17
     4e0:	2f 3f       	cpi	r18, 0xFF	; 255
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	41 05       	cpc	r20, r1
     4e6:	51 05       	cpc	r21, r1
     4e8:	61 05       	cpc	r22, r1
     4ea:	71 05       	cpc	r23, r1
     4ec:	81 05       	cpc	r24, r1
     4ee:	91 05       	cpc	r25, r1
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	1c f4       	brge	.+6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f4:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <joyPos>
     4f8:	61 c0       	rjmp	.+194    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	8c 83       	std	Y+4, r24	; 0x04
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	8d 83       	std	Y+5, r24	; 0x05
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	8e 83       	std	Y+6, r24	; 0x06
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	8f 83       	std	Y+7, r24	; 0x07
     50a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xAxis>
     50e:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xAxis+0x1>
     512:	99 87       	std	Y+9, r25	; 0x09
     514:	88 87       	std	Y+8, r24	; 0x08
     516:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xAxis>
     51a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xAxis+0x1>
     51e:	91 95       	neg	r25
     520:	81 95       	neg	r24
     522:	91 09       	sbc	r25, r1
     524:	9b 87       	std	Y+11, r25	; 0x0b
     526:	8a 87       	std	Y+10, r24	; 0x0a
     528:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <yAxis>
     52c:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <yAxis+0x1>
     530:	9d 87       	std	Y+13, r25	; 0x0d
     532:	8c 87       	std	Y+12, r24	; 0x0c
     534:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <yAxis>
     538:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <yAxis+0x1>
     53c:	91 95       	neg	r25
     53e:	81 95       	neg	r24
     540:	91 09       	sbc	r25, r1
     542:	9f 87       	std	Y+15, r25	; 0x0f
     544:	8e 87       	std	Y+14, r24	; 0x0e
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9b 83       	std	Y+3, r25	; 0x03
     54e:	8a 83       	std	Y+2, r24	; 0x02
     550:	25 c0       	rjmp	.+74     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     552:	8a 81       	ldd	r24, Y+2	; 0x02
     554:	9b 81       	ldd	r25, Y+3	; 0x03
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	9e 01       	movw	r18, r28
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	07 96       	adiw	r24, 0x07	; 7
     566:	fc 01       	movw	r30, r24
     568:	20 81       	ld	r18, Z
     56a:	31 81       	ldd	r19, Z+1	; 0x01
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	88 2f       	mov	r24, r24
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	ae 01       	movw	r20, r28
     578:	4f 5f       	subi	r20, 0xFF	; 255
     57a:	5f 4f       	sbci	r21, 0xFF	; 255
     57c:	84 0f       	add	r24, r20
     57e:	95 1f       	adc	r25, r21
     580:	07 96       	adiw	r24, 0x07	; 7
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	82 17       	cp	r24, r18
     58a:	93 07       	cpc	r25, r19
     58c:	14 f4       	brge	.+4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	9b 81       	ldd	r25, Y+3	; 0x03
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	9b 83       	std	Y+3, r25	; 0x03
     59a:	8a 83       	std	Y+2, r24	; 0x02
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	9b 81       	ldd	r25, Y+3	; 0x03
     5a0:	04 97       	sbiw	r24, 0x04	; 4
     5a2:	bc f2       	brlt	.-82     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9e 01       	movw	r18, r28
     5ac:	2c 5f       	subi	r18, 0xFC	; 252
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <joyPos>
     5bc:	af 96       	adiw	r28, 0x2f	; 47
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	3f 90       	pop	r3
     5ea:	2f 90       	pop	r2
     5ec:	08 95       	ret

000005ee <TimerSet>:
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <TimerSet+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <TimerSet+0x8>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	69 83       	std	Y+1, r22	; 0x01
     5fc:	7a 83       	std	Y+2, r23	; 0x02
     5fe:	8b 83       	std	Y+3, r24	; 0x03
     600:	9c 83       	std	Y+4, r25	; 0x04
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	ab 81       	ldd	r26, Y+3	; 0x03
     608:	bc 81       	ldd	r27, Y+4	; 0x04
     60a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M>
     60e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x1>
     612:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_M+0x2>
     616:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_M+0x3>
     61a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     61e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     622:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     626:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     62a:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <_avr_timer_cntcurr>
     62e:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <_avr_timer_cntcurr+0x1>
     632:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <_avr_timer_cntcurr+0x2>
     636:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <_avr_timer_cntcurr+0x3>
     63a:	00 00       	nop
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <TimerOn>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	81 eb       	ldi	r24, 0xB1	; 177
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	2b e0       	ldi	r18, 0x0B	; 11
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
     65c:	83 eb       	ldi	r24, 0xB3	; 179
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2d e7       	ldi	r18, 0x7D	; 125
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
     666:	80 e7       	ldi	r24, 0x70	; 112
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
     670:	82 eb       	ldi	r24, 0xB2	; 178
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	fc 01       	movw	r30, r24
     676:	10 82       	st	Z, r1
     678:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     67c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     680:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     684:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     688:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <_avr_timer_cntcurr>
     68c:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <_avr_timer_cntcurr+0x1>
     690:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <_avr_timer_cntcurr+0x2>
     694:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <_avr_timer_cntcurr+0x3>
     698:	8f e5       	ldi	r24, 0x5F	; 95
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2f e5       	ldi	r18, 0x5F	; 95
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	20 68       	ori	r18, 0x80	; 128
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
     6aa:	00 00       	nop
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <TimerISR>:
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <__data_end>
     6c0:	00 00       	nop
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <__vector_9>:
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     6d8:	0f 92       	push	r0
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <_avr_timer_cntcurr>
     6fe:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <_avr_timer_cntcurr+0x1>
     702:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <_avr_timer_cntcurr+0x2>
     706:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <_avr_timer_cntcurr+0x3>
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	a1 09       	sbc	r26, r1
     70e:	b1 09       	sbc	r27, r1
     710:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <_avr_timer_cntcurr>
     714:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <_avr_timer_cntcurr+0x1>
     718:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <_avr_timer_cntcurr+0x2>
     71c:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <_avr_timer_cntcurr+0x3>
     720:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <_avr_timer_cntcurr>
     724:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <_avr_timer_cntcurr+0x1>
     728:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <_avr_timer_cntcurr+0x2>
     72c:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <_avr_timer_cntcurr+0x3>
     730:	89 2b       	or	r24, r25
     732:	8a 2b       	or	r24, r26
     734:	8b 2b       	or	r24, r27
     736:	89 f4       	brne	.+34     	; 0x75a <__vector_9+0x92>
     738:	bc df       	rcall	.-136    	; 0x6b2 <TimerISR>
     73a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     73e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     742:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     746:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     74a:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <_avr_timer_cntcurr>
     74e:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <_avr_timer_cntcurr+0x1>
     752:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <_avr_timer_cntcurr+0x2>
     756:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <_avr_timer_cntcurr+0x3>
     75a:	00 00       	nop
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	bf 91       	pop	r27
     766:	af 91       	pop	r26
     768:	9f 91       	pop	r25
     76a:	8f 91       	pop	r24
     76c:	7f 91       	pop	r23
     76e:	6f 91       	pop	r22
     770:	5f 91       	pop	r21
     772:	4f 91       	pop	r20
     774:	3f 91       	pop	r19
     776:	2f 91       	pop	r18
     778:	0f 90       	pop	r0
     77a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     77e:	0f 90       	pop	r0
     780:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <QueueInit>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <QueueInit+0x6>
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	8b 83       	std	Y+3, r24	; 0x03
     798:	86 e0       	ldi	r24, 0x06	; 6
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	c4 d7       	rcall	.+3976   	; 0x1726 <malloc>
     79e:	9a 83       	std	Y+2, r25	; 0x02
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	be d7       	rcall	.+3964   	; 0x1726 <malloc>
     7aa:	9c 01       	movw	r18, r24
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	fc 01       	movw	r30, r24
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	fc 01       	movw	r30, r24
     7bc:	12 82       	std	Z+2, r1	; 0x02
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	fc 01       	movw	r30, r24
     7c4:	13 82       	std	Z+3, r1	; 0x03
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	fc 01       	movw	r30, r24
     7cc:	14 82       	std	Z+4, r1	; 0x04
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	2b 81       	ldd	r18, Y+3	; 0x03
     7d4:	fc 01       	movw	r30, r24
     7d6:	25 83       	std	Z+5, r18	; 0x05
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <QueueIsEmpty>:
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <QueueIsEmpty+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	fc 01       	movw	r30, r24
     7fc:	94 81       	ldd	r25, Z+4	; 0x04
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	99 23       	and	r25, r25
     802:	09 f0       	breq	.+2      	; 0x806 <QueueIsEmpty+0x1e>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <QueueMakeEmpty>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Flushes the queue
//Parameter: None
//Returns: None
void QueueMakeEmpty(Queue Q)
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <QueueMakeEmpty+0x6>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
	Q->front 		= 0;
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	12 82       	std	Z+2, r1	; 0x02
	Q->back 		= 0;
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	fc 01       	movw	r30, r24
     82c:	13 82       	std	Z+3, r1	; 0x03
	Q->num_objects	= 0;
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	14 82       	std	Z+4, r1	; 0x04
}
     836:	00 00       	nop
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <QueueEnqueue>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Push a character onto back of queue
//Parameter: Takes a single unsigned char value
//Returns: 1 if full else 0
unsigned char QueueEnqueue(Queue Q, unsigned char value) 
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <QueueEnqueue+0x6>
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	6b 83       	std	Y+3, r22	; 0x03
	if(Q->num_objects < Q->capacity)	// If queue is not full
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	fc 01       	movw	r30, r24
     85a:	24 81       	ldd	r18, Z+4	; 0x04
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	fc 01       	movw	r30, r24
     862:	85 81       	ldd	r24, Z+5	; 0x05
     864:	28 17       	cp	r18, r24
     866:	b8 f5       	brcc	.+110    	; 0x8d6 <QueueEnqueue+0x94>
	{
		Q->buffer[Q->back] = value;		// Place data into correct location
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	fc 01       	movw	r30, r24
     86e:	20 81       	ld	r18, Z
     870:	31 81       	ldd	r19, Z+1	; 0x01
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	9a 81       	ldd	r25, Y+2	; 0x02
     876:	fc 01       	movw	r30, r24
     878:	83 81       	ldd	r24, Z+3	; 0x03
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	2b 81       	ldd	r18, Y+3	; 0x03
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
		Q->back++;						// Increment back counter
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	83 81       	ldd	r24, Z+3	; 0x03
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	28 0f       	add	r18, r24
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	fc 01       	movw	r30, r24
     89a:	23 83       	std	Z+3, r18	; 0x03
		Q->back %= Q->capacity;			// Modulate according to queue capacity
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	23 81       	ldd	r18, Z+3	; 0x03
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	95 81       	ldd	r25, Z+5	; 0x05
     8ac:	82 2f       	mov	r24, r18
     8ae:	69 2f       	mov	r22, r25
     8b0:	c5 d6       	rcall	.+3466   	; 0x163c <__udivmodqi4>
     8b2:	89 2f       	mov	r24, r25
     8b4:	28 2f       	mov	r18, r24
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	fc 01       	movw	r30, r24
     8bc:	23 83       	std	Z+3, r18	; 0x03
		Q->num_objects++;				// Increment number of objects
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	fc 01       	movw	r30, r24
     8c4:	84 81       	ldd	r24, Z+4	; 0x04
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	28 0f       	add	r18, r24
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	fc 01       	movw	r30, r24
     8d0:	24 83       	std	Z+4, r18	; 0x04
		return 0;						// Return queue is not full (0)
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <QueueEnqueue+0x96>
	}
	return 1;							// Else return queue is full (1)
     8d6:	81 e0       	ldi	r24, 0x01	; 1
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <QueueDequeue>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Pop first character from front of queue
//Parameter: None
//Returns: Unsigned char from queue else null character
unsigned char QueueDequeue(Queue Q) 
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <QueueDequeue+0x6>
     8ea:	1f 92       	push	r1
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	9b 83       	std	Y+3, r25	; 0x03
     8f2:	8a 83       	std	Y+2, r24	; 0x02
	if(Q->num_objects > 0)				// If queue is not empty
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	9b 81       	ldd	r25, Y+3	; 0x03
     8f8:	fc 01       	movw	r30, r24
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	88 23       	and	r24, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <QueueDequeue+0x1e>
     900:	46 c0       	rjmp	.+140    	; 0x98e <QueueDequeue+0xaa>
	{									// Retrieve data from correct location
		unsigned char tmp = Q->buffer[Q->front];	
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	fc 01       	movw	r30, r24
     908:	20 81       	ld	r18, Z
     90a:	31 81       	ldd	r19, Z+1	; 0x01
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
     910:	fc 01       	movw	r30, r24
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	88 2f       	mov	r24, r24
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	89 83       	std	Y+1, r24	; 0x01
		Q->buffer[Q->front] = '\0';		// Clear location with null character
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	9b 81       	ldd	r25, Y+3	; 0x03
     926:	fc 01       	movw	r30, r24
     928:	20 81       	ld	r18, Z
     92a:	31 81       	ldd	r19, Z+1	; 0x01
     92c:	8a 81       	ldd	r24, Y+2	; 0x02
     92e:	9b 81       	ldd	r25, Y+3	; 0x03
     930:	fc 01       	movw	r30, r24
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	fc 01       	movw	r30, r24
     93e:	10 82       	st	Z, r1
		Q->front++;						// Increment front counter
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	fc 01       	movw	r30, r24
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	28 0f       	add	r18, r24
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	9b 81       	ldd	r25, Y+3	; 0x03
     950:	fc 01       	movw	r30, r24
     952:	22 83       	std	Z+2, r18	; 0x02
		Q->front %= Q->capacity;		// Modulate according to queue capacity
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	9b 81       	ldd	r25, Y+3	; 0x03
     958:	fc 01       	movw	r30, r24
     95a:	22 81       	ldd	r18, Z+2	; 0x02
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	9b 81       	ldd	r25, Y+3	; 0x03
     960:	fc 01       	movw	r30, r24
     962:	95 81       	ldd	r25, Z+5	; 0x05
     964:	82 2f       	mov	r24, r18
     966:	69 2f       	mov	r22, r25
     968:	69 d6       	rcall	.+3282   	; 0x163c <__udivmodqi4>
     96a:	89 2f       	mov	r24, r25
     96c:	28 2f       	mov	r18, r24
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	9b 81       	ldd	r25, Y+3	; 0x03
     972:	fc 01       	movw	r30, r24
     974:	22 83       	std	Z+2, r18	; 0x02
		Q->num_objects--;				// Decrement number of objects
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	fc 01       	movw	r30, r24
     97c:	84 81       	ldd	r24, Z+4	; 0x04
     97e:	2f ef       	ldi	r18, 0xFF	; 255
     980:	28 0f       	add	r18, r24
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	9b 81       	ldd	r25, Y+3	; 0x03
     986:	fc 01       	movw	r30, r24
     988:	24 83       	std	Z+4, r18	; 0x04
		return tmp;						// Return data
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	01 c0       	rjmp	.+2      	; 0x990 <QueueDequeue+0xac>
	}
	return '\0';						// Else return null to indicate empty
     98e:	80 e0       	ldi	r24, 0x00	; 0
}
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <MotorThumbsDown>:
#include "usart.h"
#include "joystick.h"
#include "timer.h"
#include "queue.h"

void MotorThumbsDown(){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
     9a4:	8a e7       	ldi	r24, 0x7A	; 122
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	25 e8       	ldi	r18, 0x85	; 133
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
	
	//Initial Time Interrupts
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted Send_Motor
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	20 e8       	ldi	r18, 0x80	; 128
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	22 6a       	ori	r18, 0xA2	; 162
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST Send_Motor)
     9c0:	81 e8       	ldi	r24, 0x81	; 129
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	21 e8       	ldi	r18, 0x81	; 129
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	2b 61       	ori	r18, 0x1B	; 27
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
	ICR1=4999;  //fSend_Motor=50Hz
     9d2:	86 e8       	ldi	r24, 0x86	; 134
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	27 e8       	ldi	r18, 0x87	; 135
     9d8:	33 e1       	ldi	r19, 0x13	; 19
     9da:	fc 01       	movw	r30, r24
     9dc:	31 83       	std	Z+1, r19	; 0x01
     9de:	20 83       	st	Z, r18
	
	DDRD|=(1<<PD4)|(1<<PD5);   //Send_Motor Pins as Output
     9e0:	8a e2       	ldi	r24, 0x2A	; 42
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2a e2       	ldi	r18, 0x2A	; 42
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	20 63       	ori	r18, 0x30	; 48
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
	
	ADMUX=0x00;// ADC input channel set to PA0
     9f2:	8c e7       	ldi	r24, 0x7C	; 124
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADSC); // Start conversion
     9fa:	8a e7       	ldi	r24, 0x7A	; 122
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	2a e7       	ldi	r18, 0x7A	; 122
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	f9 01       	movw	r30, r18
     a04:	20 81       	ld	r18, Z
     a06:	20 64       	ori	r18, 0x40	; 64
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
	while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
     a0c:	00 00       	nop
     a0e:	8a e7       	ldi	r24, 0x7A	; 122
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	88 2f       	mov	r24, r24
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	80 74       	andi	r24, 0x40	; 64
     a1c:	99 27       	eor	r25, r25
     a1e:	89 2b       	or	r24, r25
     a20:	b1 f7       	brne	.-20     	; 0xa0e <MotorThumbsDown+0x72>
	
	OCR1A = 80;
     a22:	88 e8       	ldi	r24, 0x88	; 136
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	20 e5       	ldi	r18, 0x50	; 80
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	31 83       	std	Z+1, r19	; 0x01
     a2e:	20 83       	st	Z, r18
}
     a30:	00 00       	nop
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <MotorThumbsUp>:

void MotorThumbsUp(){
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
     a40:	8a e7       	ldi	r24, 0x7A	; 122
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	25 e8       	ldi	r18, 0x85	; 133
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
	
	//Initial Time Interrupts
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted Send_Motor
     a4a:	80 e8       	ldi	r24, 0x80	; 128
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	20 e8       	ldi	r18, 0x80	; 128
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	22 6a       	ori	r18, 0xA2	; 162
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST Send_Motor)
     a5c:	81 e8       	ldi	r24, 0x81	; 129
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	21 e8       	ldi	r18, 0x81	; 129
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	2b 61       	ori	r18, 0x1B	; 27
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
	ICR1=4999;  //fSend_Motor=50Hz
     a6e:	86 e8       	ldi	r24, 0x86	; 134
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	27 e8       	ldi	r18, 0x87	; 135
     a74:	33 e1       	ldi	r19, 0x13	; 19
     a76:	fc 01       	movw	r30, r24
     a78:	31 83       	std	Z+1, r19	; 0x01
     a7a:	20 83       	st	Z, r18
	
	DDRD|=(1<<PD4)|(1<<PD5);   //Send_Motor Pins as Output
     a7c:	8a e2       	ldi	r24, 0x2A	; 42
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2a e2       	ldi	r18, 0x2A	; 42
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	20 63       	ori	r18, 0x30	; 48
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
	
	ADMUX=0x00;// ADC input channel set to PA0
     a8e:	8c e7       	ldi	r24, 0x7C	; 124
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADSC); // Start conversion
     a96:	8a e7       	ldi	r24, 0x7A	; 122
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	2a e7       	ldi	r18, 0x7A	; 122
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	f9 01       	movw	r30, r18
     aa0:	20 81       	ld	r18, Z
     aa2:	20 64       	ori	r18, 0x40	; 64
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
	while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
     aa8:	00 00       	nop
     aaa:	8a e7       	ldi	r24, 0x7A	; 122
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	80 74       	andi	r24, 0x40	; 64
     ab8:	99 27       	eor	r25, r25
     aba:	89 2b       	or	r24, r25
     abc:	b1 f7       	brne	.-20     	; 0xaaa <MotorThumbsUp+0x72>
	
	OCR1A = 500;
     abe:	88 e8       	ldi	r24, 0x88	; 136
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	24 ef       	ldi	r18, 0xF4	; 244
     ac4:	31 e0       	ldi	r19, 0x01	; 1
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
}
     acc:	00 00       	nop
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <MotorMiddle>:

void MotorMiddle(){
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
     adc:	8a e7       	ldi	r24, 0x7A	; 122
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	25 e8       	ldi	r18, 0x85	; 133
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 83       	st	Z, r18
	
	//Initial Time Interrupts
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted Send_Motor
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	20 e8       	ldi	r18, 0x80	; 128
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	f9 01       	movw	r30, r18
     af0:	20 81       	ld	r18, Z
     af2:	22 6a       	ori	r18, 0xA2	; 162
     af4:	fc 01       	movw	r30, r24
     af6:	20 83       	st	Z, r18
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST Send_Motor)
     af8:	81 e8       	ldi	r24, 0x81	; 129
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	21 e8       	ldi	r18, 0x81	; 129
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	20 81       	ld	r18, Z
     b04:	2b 61       	ori	r18, 0x1B	; 27
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
	ICR1=4999;  //fSend_Motor=50Hz
     b0a:	86 e8       	ldi	r24, 0x86	; 134
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	27 e8       	ldi	r18, 0x87	; 135
     b10:	33 e1       	ldi	r19, 0x13	; 19
     b12:	fc 01       	movw	r30, r24
     b14:	31 83       	std	Z+1, r19	; 0x01
     b16:	20 83       	st	Z, r18
	
	DDRD|=(1<<PD4)|(1<<PD5);   //Send_Motor Pins as Output
     b18:	8a e2       	ldi	r24, 0x2A	; 42
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	2a e2       	ldi	r18, 0x2A	; 42
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	20 63       	ori	r18, 0x30	; 48
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
	
	ADMUX=0x00;// ADC input channel set to PA0
     b2a:	8c e7       	ldi	r24, 0x7C	; 124
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	fc 01       	movw	r30, r24
     b30:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADSC); // Start conversion
     b32:	8a e7       	ldi	r24, 0x7A	; 122
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2a e7       	ldi	r18, 0x7A	; 122
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	f9 01       	movw	r30, r18
     b3c:	20 81       	ld	r18, Z
     b3e:	20 64       	ori	r18, 0x40	; 64
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
	while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
     b44:	00 00       	nop
     b46:	8a e7       	ldi	r24, 0x7A	; 122
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	fc 01       	movw	r30, r24
     b4c:	80 81       	ld	r24, Z
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	80 74       	andi	r24, 0x40	; 64
     b54:	99 27       	eor	r25, r25
     b56:	89 2b       	or	r24, r25
     b58:	b1 f7       	brne	.-20     	; 0xb46 <MotorMiddle+0x72>
	
	OCR1A = 180;
     b5a:	88 e8       	ldi	r24, 0x88	; 136
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	24 eb       	ldi	r18, 0xB4	; 180
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	31 83       	std	Z+1, r19	; 0x01
     b66:	20 83       	st	Z, r18
}
     b68:	00 00       	nop
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <MotorTick>:

task MotorTask, joyTask, action, stage, head;


enum MotorStates {Middle, thumbsUp, thumbsDown};
int MotorTick(int state) {
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <MotorTick+0x6>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
		case Middle:
			//MotorMiddle();
			break;
		case thumbsUp:
			//MotorThumbsUp();
			break;
     b7e:	00 00       	nop
		case thumbsDown:
			//MotorThumbsDown();
			break;
	}
	
	return state;
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <HeadTick>:

signed char currentLevel = -1;
signed char nextLevel = 0;	

enum HeadStates {HeadExecute, HeadLoss, HeadFinish};
int HeadTick(int state) { //Head of game, controls everything
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <HeadTick+0x6>
     b94:	1f 92       	push	r1
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	9b 83       	std	Y+3, r25	; 0x03
     b9c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tempA = ~PINA;
     b9e:	80 e2       	ldi	r24, 0x20	; 32
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	80 95       	com	r24
     ba8:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f1       	breq	.+66     	; 0xbf6 <HeadTick+0x68>
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	91 05       	cpc	r25, r1
     bb8:	89 f1       	breq	.+98     	; 0xc1c <HeadTick+0x8e>
     bba:	89 2b       	or	r24, r25
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <HeadTick+0x32>
     bbe:	56 c0       	rjmp	.+172    	; 0xc6c <HeadTick+0xde>
		case HeadExecute:
			if(tempA & 0x04) { //soft reset
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	84 70       	andi	r24, 0x04	; 4
     bc8:	99 27       	eor	r25, r25
     bca:	89 2b       	or	r24, r25
				MotorMiddle();
     bcc:	31 f0       	breq	.+12     	; 0xbda <HeadTick+0x4c>
				nextLevel = currentLevel;
     bce:	82 df       	rcall	.-252    	; 0xad4 <MotorMiddle>
     bd0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
     bd4:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <nextLevel>
			}
			else if(tempA & 0x08) { //hard reset
     bd8:	44 c0       	rjmp	.+136    	; 0xc62 <HeadTick+0xd4>
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	88 70       	andi	r24, 0x08	; 8
     be2:	99 27       	eor	r25, r25
     be4:	89 2b       	or	r24, r25
     be6:	09 f4       	brne	.+2      	; 0xbea <HeadTick+0x5c>
				currentLevel = -1;
     be8:	3c c0       	rjmp	.+120    	; 0xc62 <HeadTick+0xd4>
     bea:	8f ef       	ldi	r24, 0xFF	; 255
     bec:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <currentLevel>
				nextLevel = 0;
     bf0:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <nextLevel>
			}
			break;
		case HeadLoss:
			joyTask.running = 0; 
     bf4:	36 c0       	rjmp	.+108    	; 0xc62 <HeadTick+0xd4>
     bf6:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <joyTask+0xb>
			action.running = 0;
     bfa:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <action+0xb>
			if(tempA & 0x04) {
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	84 70       	andi	r24, 0x04	; 4
     c06:	99 27       	eor	r25, r25
				MotorMiddle();
     c08:	89 2b       	or	r24, r25
     c0a:	69 f1       	breq	.+90     	; 0xc66 <HeadTick+0xd8>
				state = HeadExecute;
     c0c:	63 df       	rcall	.-314    	; 0xad4 <MotorMiddle>
     c0e:	1b 82       	std	Y+3, r1	; 0x03
				nextLevel = currentLevel;
     c10:	1a 82       	std	Y+2, r1	; 0x02
     c12:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
     c16:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <nextLevel>
			}
			break;
		case HeadFinish:
			joyTask.running = 0;
     c1a:	25 c0       	rjmp	.+74     	; 0xc66 <HeadTick+0xd8>
     c1c:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <joyTask+0xb>
			action.running = 0;
     c20:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <action+0xb>
			if(tempA & 0x04) {
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	84 70       	andi	r24, 0x04	; 4
     c2c:	99 27       	eor	r25, r25
				MotorMiddle();
     c2e:	89 2b       	or	r24, r25
     c30:	e1 f0       	breq	.+56     	; 0xc6a <HeadTick+0xdc>
				state = HeadExecute;
     c32:	50 df       	rcall	.-352    	; 0xad4 <MotorMiddle>
     c34:	1b 82       	std	Y+3, r1	; 0x03
				currentLevel = (currentLevel + 1) % STAGES;
     c36:	1a 82       	std	Y+2, r1	; 0x02
     c38:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
     c3c:	08 2e       	mov	r0, r24
     c3e:	00 0c       	add	r0, r0
     c40:	99 0b       	sbc	r25, r25
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	90 78       	andi	r25, 0x80	; 128
     c48:	99 23       	and	r25, r25
     c4a:	24 f4       	brge	.+8      	; 0xc54 <HeadTick+0xc6>
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	88 6f       	ori	r24, 0xF8	; 248
     c50:	9f 6f       	ori	r25, 0xFF	; 255
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <currentLevel>
				nextLevel = currentLevel;
     c58:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
     c5c:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <nextLevel>
			}
			else if(tempA & 0x08) { //hard reset
				currentLevel = -1;
				nextLevel = 0;
			}
			break;
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <HeadTick+0xdc>
     c62:	00 00       	nop
			if(tempA & 0x04) {
				MotorMiddle();
				state = HeadExecute;
				nextLevel = currentLevel;
			}
			break;
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <HeadTick+0xde>
     c66:	00 00       	nop
				MotorMiddle();
				state = HeadExecute;
				currentLevel = (currentLevel + 1) % STAGES;
				nextLevel = currentLevel;
			}
			break;
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <HeadTick+0xde>
	}
	return state;
     c6a:	00 00       	nop
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <nextBound>:

unsigned char nextBound(unsigned char *xBound, unsigned char *yBound) {
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	00 d0       	rcall	.+0      	; 0xc82 <nextBound+0x6>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <nextBound+0x8>
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	7c 83       	std	Y+4, r23	; 0x04
     c8e:	6b 83       	std	Y+3, r22	; 0x03
	(*yBound)++;
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	28 0f       	add	r18, r24
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
	if((*yBound) % 16 == 0) {
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	fc 01       	movw	r30, r24
     caa:	80 81       	ld	r24, Z
     cac:	8f 70       	andi	r24, 0x0F	; 15
     cae:	88 23       	and	r24, r24
     cb0:	a1 f4       	brne	.+40     	; 0xcda <nextBound+0x5e>
		*yBound = (*yBound) % 16; 
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	fc 01       	movw	r30, r24
     cb8:	80 81       	ld	r24, Z
     cba:	28 2f       	mov	r18, r24
     cbc:	2f 70       	andi	r18, 0x0F	; 15
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
		(*xBound)++;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	28 0f       	add	r18, r24
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
	}
	
	if(*xBound > 0 && (*xBound) % 8 == 0) {
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	88 23       	and	r24, r24
     ce4:	49 f0       	breq	.+18     	; 0xcf8 <nextBound+0x7c>
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	87 70       	andi	r24, 0x07	; 7
     cf0:	88 23       	and	r24, r24
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <nextBound+0x7c>
		return 0;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <nextBound+0x7e>
	}
	
	return 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <StageTick>:

unsigned char playerPosition[2] = {0, 0};
unsigned char xBound;
unsigned char yBound;

int StageTick(int state) { //State machine for stages
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <StageTick+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	19 f0       	breq	.+6      	; 0xd24 <StageTick+0x1c>
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	61 f1       	breq	.+88     	; 0xd7a <StageTick+0x72>
     d22:	ff c0       	rjmp	.+510    	; 0xf22 <StageTick+0x21a>
		case stageWait:
			if(nextLevel != -1) {
     d24:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <nextLevel>
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	09 f4       	brne	.+2      	; 0xd2e <StageTick+0x26>
     d2c:	f9 c0       	rjmp	.+498    	; 0xf20 <StageTick+0x218>
				xBound = 0;
     d2e:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <xBound>
				yBound = 0;
     d32:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <yBound>
				playerPosition[0] = 0;
     d36:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <playerPosition>
				playerPosition[1] = 0;
     d3a:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <playerPosition+0x1>
				head.running = 0;
     d3e:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <head+0xb>
				joyTask.running = 0;
     d42:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <joyTask+0xb>
				action.running = 0;
     d46:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <action+0xb>
				
				QueueMakeEmpty(moveStack);
     d4a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <moveStack>
     d4e:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <moveStack+0x1>
     d52:	5e dd       	rcall	.-1348   	; 0x810 <QueueMakeEmpty>
				state = stageLoad;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
				
				while(!USART_IsSendReady(0));
     d5c:	00 00       	nop
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	fa d9       	rcall	.-3084   	; 0x156 <USART_IsSendReady>
				USART_Send(0x00, 0);
     d62:	88 23       	and	r24, r24
     d64:	e1 f3       	breq	.-8      	; 0xd5e <StageTick+0x56>
				while(!USART_HasTransmitted(0));
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	55 da       	rcall	.-2902   	; 0x216 <USART_Send>
     d6c:	00 00       	nop
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0a da       	rcall	.-3052   	; 0x186 <USART_HasTransmitted>
				asm("nop"); 
     d72:	88 23       	and	r24, r24
			}
			break;
     d74:	e1 f3       	breq	.-8      	; 0xd6e <StageTick+0x66>
			
		case stageLoad:
			while(Levels[nextLevel][xBound][yBound] == BLANK && nextBound(&xBound, &yBound));
     d76:	00 00       	nop
     d78:	d3 c0       	rjmp	.+422    	; 0xf20 <StageTick+0x218>
     d7a:	00 00       	nop
     d7c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <nextLevel>
     d80:	48 2f       	mov	r20, r24
     d82:	88 0f       	add	r24, r24
     d84:	55 0b       	sbc	r21, r21
     d86:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <yBound>
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	44 0f       	add	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	44 0f       	add	r20, r20
     d9c:	55 1f       	adc	r21, r21
     d9e:	44 0f       	add	r20, r20
     da0:	55 1f       	adc	r21, r21
     da2:	24 0f       	add	r18, r20
     da4:	35 1f       	adc	r19, r21
     da6:	22 95       	swap	r18
     da8:	32 95       	swap	r19
     daa:	30 7f       	andi	r19, 0xF0	; 240
     dac:	32 27       	eor	r19, r18
     dae:	20 7f       	andi	r18, 0xF0	; 240
     db0:	32 27       	eor	r19, r18
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	86 5f       	subi	r24, 0xF6	; 246
     db8:	9e 4f       	sbci	r25, 0xFE	; 254
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <StageTick+0xc8>
     dc2:	69 e7       	ldi	r22, 0x79	; 121
     dc4:	75 e0       	ldi	r23, 0x05	; 5
     dc6:	8b e5       	ldi	r24, 0x5B	; 91
     dc8:	95 e0       	ldi	r25, 0x05	; 5
			if(xBound > 0 && xBound % 8 == 0) {
     dca:	58 df       	rcall	.-336    	; 0xc7c <nextBound>
     dcc:	88 23       	and	r24, r24
     dce:	b1 f6       	brne	.-84     	; 0xd7c <StageTick+0x74>
     dd0:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     dd4:	88 23       	and	r24, r24
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <StageTick+0x104>
     dd8:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
				head.running = 1;
     ddc:	87 70       	andi	r24, 0x07	; 7
     dde:	88 23       	and	r24, r24
     de0:	a9 f4       	brne	.+42     	; 0xe0c <StageTick+0x104>
				action.running = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <head+0xb>
				joyTask.running = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <action+0xb>
				action.state = actionStart;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <joyTask+0xb>
				currentLevel = nextLevel;
     df4:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <action>
     df8:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <nextLevel>
				nextLevel = -1;
     dfc:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <currentLevel>
				state = stageWait;
				break;
     e00:	8f ef       	ldi	r24, 0xFF	; 255
			}
			
			while(!USART_IsSendReady(0));
     e02:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <nextLevel>
     e06:	1a 82       	std	Y+2, r1	; 0x02
     e08:	19 82       	std	Y+1, r1	; 0x01
     e0a:	8b c0       	rjmp	.+278    	; 0xf22 <StageTick+0x21a>
     e0c:	00 00       	nop
			USART_Send((Levels[nextLevel][xBound][yBound] << 5) | 0x02, 0);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	a2 d9       	rcall	.-3260   	; 0x156 <USART_IsSendReady>
     e12:	88 23       	and	r24, r24
     e14:	e1 f3       	breq	.-8      	; 0xe0e <StageTick+0x106>
     e16:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <nextLevel>
     e1a:	48 2f       	mov	r20, r24
     e1c:	88 0f       	add	r24, r24
     e1e:	55 0b       	sbc	r21, r21
     e20:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <yBound>
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	44 0f       	add	r20, r20
     e32:	55 1f       	adc	r21, r21
     e34:	44 0f       	add	r20, r20
     e36:	55 1f       	adc	r21, r21
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	24 0f       	add	r18, r20
     e3e:	35 1f       	adc	r19, r21
     e40:	22 95       	swap	r18
     e42:	32 95       	swap	r19
     e44:	30 7f       	andi	r19, 0xF0	; 240
     e46:	32 27       	eor	r19, r18
     e48:	20 7f       	andi	r18, 0xF0	; 240
     e4a:	32 27       	eor	r19, r18
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	86 5f       	subi	r24, 0xF6	; 246
     e52:	9e 4f       	sbci	r25, 0xFE	; 254
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	82 95       	swap	r24
     e62:	92 95       	swap	r25
     e64:	90 7f       	andi	r25, 0xF0	; 240
     e66:	98 27       	eor	r25, r24
			while(!USART_HasTransmitted(0));
     e68:	80 7f       	andi	r24, 0xF0	; 240
     e6a:	98 27       	eor	r25, r24
     e6c:	82 60       	ori	r24, 0x02	; 2
     e6e:	60 e0       	ldi	r22, 0x00	; 0
			asm("nop");
     e70:	d2 d9       	rcall	.-3164   	; 0x216 <USART_Send>
			
			while(!USART_IsSendReady(0));
     e72:	00 00       	nop
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	87 d9       	rcall	.-3314   	; 0x186 <USART_HasTransmitted>
			USART_Send(yBound * 2, 0);
     e78:	88 23       	and	r24, r24
     e7a:	e1 f3       	breq	.-8      	; 0xe74 <StageTick+0x16c>
     e7c:	00 00       	nop
     e7e:	00 00       	nop
     e80:	80 e0       	ldi	r24, 0x00	; 0
			while(!USART_HasTransmitted(0));
     e82:	69 d9       	rcall	.-3374   	; 0x156 <USART_IsSendReady>
     e84:	88 23       	and	r24, r24
     e86:	e1 f3       	breq	.-8      	; 0xe80 <StageTick+0x178>
     e88:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <yBound>
			asm("nop");
     e8c:	88 0f       	add	r24, r24
			
			while(!USART_IsSendReady(0));
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	c2 d9       	rcall	.-3196   	; 0x216 <USART_Send>
     e92:	00 00       	nop
     e94:	80 e0       	ldi	r24, 0x00	; 0
			USART_Send(xBound * 2, 0);
     e96:	77 d9       	rcall	.-3346   	; 0x186 <USART_HasTransmitted>
     e98:	88 23       	and	r24, r24
     e9a:	e1 f3       	breq	.-8      	; 0xe94 <StageTick+0x18c>
     e9c:	00 00       	nop
     e9e:	00 00       	nop
     ea0:	80 e0       	ldi	r24, 0x00	; 0
			while(!USART_HasTransmitted(0));
     ea2:	59 d9       	rcall	.-3406   	; 0x156 <USART_IsSendReady>
     ea4:	88 23       	and	r24, r24
     ea6:	e1 f3       	breq	.-8      	; 0xea0 <StageTick+0x198>
     ea8:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     eac:	88 0f       	add	r24, r24
			asm("nop");
     eae:	60 e0       	ldi	r22, 0x00	; 0
			
			if(Levels[nextLevel][xBound][yBound] == PLAYER) {
     eb0:	b2 d9       	rcall	.-3228   	; 0x216 <USART_Send>
     eb2:	00 00       	nop
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	67 d9       	rcall	.-3378   	; 0x186 <USART_HasTransmitted>
     eb8:	88 23       	and	r24, r24
     eba:	e1 f3       	breq	.-8      	; 0xeb4 <StageTick+0x1ac>
     ebc:	00 00       	nop
     ebe:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <nextLevel>
     ec2:	48 2f       	mov	r20, r24
     ec4:	88 0f       	add	r24, r24
     ec6:	55 0b       	sbc	r21, r21
     ec8:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <yBound>
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	24 0f       	add	r18, r20
     ee6:	35 1f       	adc	r19, r21
     ee8:	22 95       	swap	r18
     eea:	32 95       	swap	r19
     eec:	30 7f       	andi	r19, 0xF0	; 240
     eee:	32 27       	eor	r19, r18
     ef0:	20 7f       	andi	r18, 0xF0	; 240
     ef2:	32 27       	eor	r19, r18
				playerPosition[0] = xBound;
     ef4:	82 0f       	add	r24, r18
     ef6:	93 1f       	adc	r25, r19
     ef8:	86 5f       	subi	r24, 0xF6	; 246
     efa:	9e 4f       	sbci	r25, 0xFE	; 254
				playerPosition[1] = yBound;
     efc:	fc 01       	movw	r30, r24
     efe:	80 81       	ld	r24, Z
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	41 f4       	brne	.+16     	; 0xf14 <StageTick+0x20c>
			}
			
			nextBound(&xBound, &yBound);
     f04:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <xBound>
     f08:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <playerPosition>
     f0c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <yBound>
     f10:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <playerPosition+0x1>
	}
	return state;
     f14:	69 e7       	ldi	r22, 0x79	; 121
     f16:	75 e0       	ldi	r23, 0x05	; 5
}
     f18:	8b e5       	ldi	r24, 0x5B	; 91
     f1a:	95 e0       	ldi	r25, 0x05	; 5
     f1c:	af de       	rcall	.-674    	; 0xc7c <nextBound>
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <StageTick+0x21a>
     f20:	00 00       	nop
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <JoyTick>:
//* Thank you Cody Simmons and Stanley Cohen for joystick.h :)
enum JoyStates {input, output};	
int JoyTick(int state) {
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	00 d0       	rcall	.+0      	; 0xf36 <JoyTick+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	19 f0       	breq	.+6      	; 0xf4c <JoyTick+0x1c>
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	91 f0       	breq	.+36     	; 0xf6e <JoyTick+0x3e>
     f4a:	1b c0       	rjmp	.+54     	; 0xf82 <JoyTick+0x52>
		case input:
			if(joyPos != None) {
     f4c:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <joyPos>
     f50:	88 23       	and	r24, r24
     f52:	a1 f0       	breq	.+40     	; 0xf7c <JoyTick+0x4c>
				QueueEnqueue(moveStack, joyPos);
     f54:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <joyPos>
     f58:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <moveStack>
     f5c:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <moveStack+0x1>
     f60:	62 2f       	mov	r22, r18
     f62:	6f dc       	rcall	.-1826   	; 0x842 <QueueEnqueue>
				state = output;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <JoyTick+0x4c>
			
		case output:
			if(joyPos == None) {
     f6e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <joyPos>
     f72:	88 23       	and	r24, r24
     f74:	29 f4       	brne	.+10     	; 0xf80 <JoyTick+0x50>
				state = input;
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <JoyTick+0x50>
		case input:
			if(joyPos != None) {
				QueueEnqueue(moveStack, joyPos);
				state = output;
			}
			break;
     f7c:	00 00       	nop
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <JoyTick+0x52>
			
		case output:
			if(joyPos == None) {
				state = input;
			}
			break;
     f80:	00 00       	nop
	}
	return state;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <ActionTick>:
//* Thank you Cody Simmons and Stanley Cohen for joystick.h :)

signed char actionMoves[2] = {0, 0};
enum Positions Controls;
int ActionTick(int state) { 
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	00 d0       	rcall	.+0      	; 0xf96 <ActionTick+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ActionTick+0x8>
     f98:	1f 92       	push	r1
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9d 83       	std	Y+5, r25	; 0x05
     fa0:	8c 83       	std	Y+4, r24	; 0x04
	switch(state) {
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	91 05       	cpc	r25, r1
     faa:	a9 f0       	breq	.+42     	; 0xfd6 <ActionTick+0x46>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <ActionTick+0x24>
     fb2:	4d c0       	rjmp	.+154    	; 0x104e <ActionTick+0xbe>
     fb4:	89 2b       	or	r24, r25
     fb6:	09 f0       	breq	.+2      	; 0xfba <ActionTick+0x2a>
     fb8:	01 c2       	rjmp	.+1026   	; 0x13bc <ActionTick+0x42c>
		case actionStart:
			actionMoves[0] = 0;
     fba:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <actionMoves>
			actionMoves[1] = 0;
     fbe:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <actionMoves+0x1>
			QueueMakeEmpty(moveStack);
     fc2:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <moveStack>
     fc6:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <moveStack+0x1>
     fca:	22 dc       	rcall	.-1980   	; 0x810 <QueueMakeEmpty>
			state = actionWait;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9d 83       	std	Y+5, r25	; 0x05
     fd2:	8c 83       	std	Y+4, r24	; 0x04
			break;
     fd4:	f3 c1       	rjmp	.+998    	; 0x13bc <ActionTick+0x42c>
		case actionWait:
			if(!QueueIsEmpty(moveStack)) {
     fd6:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <moveStack>
     fda:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <moveStack+0x1>
     fde:	04 dc       	rcall	.-2040   	; 0x7e8 <QueueIsEmpty>
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <ActionTick+0x56>
     fe4:	e6 c1       	rjmp	.+972    	; 0x13b2 <ActionTick+0x422>
				state = actionMove;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9d 83       	std	Y+5, r25	; 0x05
     fec:	8c 83       	std	Y+4, r24	; 0x04
				Controls = QueueDequeue(moveStack);
     fee:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <moveStack>
     ff2:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <moveStack+0x1>
     ff6:	76 dc       	rcall	.-1812   	; 0x8e4 <QueueDequeue>
     ff8:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <Controls>
				
				if(Controls == Up) {		//					 Up
     ffc:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <Controls>
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	31 f4       	brne	.+12     	; 0x1010 <ActionTick+0x80>
					actionMoves[0] = 0;		//				   [0][-1]
    1004:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <actionMoves>
					actionMoves[1] = -1;		//					  ^
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <actionMoves+0x1>
				else if(Controls == Right) {
					actionMoves[0] = -1; 
					actionMoves[1] = 0;
				}
			}
			break;
    100e:	d1 c1       	rjmp	.+930    	; 0x13b2 <ActionTick+0x422>
				
				if(Controls == Up) {		//					 Up
					actionMoves[0] = 0;		//				   [0][-1]
					actionMoves[1] = -1;		//					  ^
					}					//					  |
				else if(Controls == Down) {	//	Left [1][0] <- [0][0] -> [-1][0] Right
    1010:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <Controls>
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	31 f4       	brne	.+12     	; 0x1024 <ActionTick+0x94>
					actionMoves[0] = 0;		//					  |
    1018:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <actionMoves>
					actionMoves[1] = 1;		//					  v
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <actionMoves+0x1>
				else if(Controls == Right) {
					actionMoves[0] = -1; 
					actionMoves[1] = 0;
				}
			}
			break;
    1022:	c7 c1       	rjmp	.+910    	; 0x13b2 <ActionTick+0x422>
					}					//					  |
				else if(Controls == Down) {	//	Left [1][0] <- [0][0] -> [-1][0] Right
					actionMoves[0] = 0;		//					  |
					actionMoves[1] = 1;		//					  v
					}					//					[0][1]
				else if(Controls == Left) {  //					 Down
    1024:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <Controls>
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	31 f4       	brne	.+12     	; 0x1038 <ActionTick+0xa8>
					actionMoves[0] = 1; 
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <actionMoves>
					actionMoves[1] = 0;
    1032:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <actionMoves+0x1>
				else if(Controls == Right) {
					actionMoves[0] = -1; 
					actionMoves[1] = 0;
				}
			}
			break;
    1036:	bd c1       	rjmp	.+890    	; 0x13b2 <ActionTick+0x422>
					}					//					[0][1]
				else if(Controls == Left) {  //					 Down
					actionMoves[0] = 1; 
					actionMoves[1] = 0;
					}
				else if(Controls == Right) {
    1038:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <Controls>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <ActionTick+0xb2>
    1040:	b8 c1       	rjmp	.+880    	; 0x13b2 <ActionTick+0x422>
					actionMoves[0] = -1; 
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <actionMoves>
					actionMoves[1] = 0;
    1048:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <actionMoves+0x1>
				}
			}
			break;
    104c:	b2 c1       	rjmp	.+868    	; 0x13b2 <ActionTick+0x422>
			
		case actionMove:
			;signed char newPosition[2] = {playerPosition[0] + actionMoves[0], playerPosition[1] + actionMoves[1]}; //temp vector to check where moved
    104e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    1052:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <actionMoves>
    1056:	89 0f       	add	r24, r25
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    105e:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <actionMoves+0x1>
    1062:	89 0f       	add	r24, r25
    1064:	8b 83       	std	Y+3, r24	; 0x03
			enum ROLES nextMove = Levels[currentLevel][newPosition[0]][newPosition[1]]; // compares temp vector location to object on our map(level).
    1066:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
    106a:	48 2f       	mov	r20, r24
    106c:	88 0f       	add	r24, r24
    106e:	55 0b       	sbc	r21, r21
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	88 0f       	add	r24, r24
    1076:	33 0b       	sbc	r19, r19
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	08 2e       	mov	r0, r24
    107c:	00 0c       	add	r0, r0
    107e:	99 0b       	sbc	r25, r25
    1080:	44 0f       	add	r20, r20
    1082:	55 1f       	adc	r21, r21
    1084:	44 0f       	add	r20, r20
    1086:	55 1f       	adc	r21, r21
    1088:	44 0f       	add	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	24 0f       	add	r18, r20
    108e:	35 1f       	adc	r19, r21
    1090:	22 95       	swap	r18
    1092:	32 95       	swap	r19
    1094:	30 7f       	andi	r19, 0xF0	; 240
    1096:	32 27       	eor	r19, r18
    1098:	20 7f       	andi	r18, 0xF0	; 240
    109a:	32 27       	eor	r19, r18
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	86 5f       	subi	r24, 0xF6	; 246
    10a2:	9e 4f       	sbci	r25, 0xFE	; 254
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	89 83       	std	Y+1, r24	; 0x01
				if(nextMove == WALL || nextMove == DEATH) {
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	21 f0       	breq	.+8      	; 0x10b8 <ActionTick+0x128>
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <ActionTick+0x128>
    10b6:	4c c0       	rjmp	.+152    	; 0x1150 <ActionTick+0x1c0>
					state = actionWait;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9d 83       	std	Y+5, r25	; 0x05
    10be:	8c 83       	std	Y+4, r24	; 0x04
					if( ((actionMoves[1] == 1 || actionMoves[1] == -1 || actionMoves[0] == 1 || actionMoves[0] == -1) && (nextMove == DEATH)) ) {
    10c0:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <actionMoves+0x1>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	69 f0       	breq	.+26     	; 0x10e2 <ActionTick+0x152>
    10c8:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <actionMoves+0x1>
    10cc:	8f 3f       	cpi	r24, 0xFF	; 255
    10ce:	49 f0       	breq	.+18     	; 0x10e2 <ActionTick+0x152>
    10d0:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <actionMoves>
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <ActionTick+0x152>
    10d8:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <actionMoves>
    10dc:	8f 3f       	cpi	r24, 0xFF	; 255
    10de:	09 f0       	breq	.+2      	; 0x10e2 <ActionTick+0x152>
    10e0:	6a c1       	rjmp	.+724    	; 0x13b6 <ActionTick+0x426>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	09 f0       	breq	.+2      	; 0x10ea <ActionTick+0x15a>
    10e8:	66 c1       	rjmp	.+716    	; 0x13b6 <ActionTick+0x426>
						head.state = HeadLoss;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <head>
						
						while(!USART_IsSendReady(0));
    10f0:	00 00       	nop
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	30 d8       	rcall	.-4000   	; 0x156 <USART_IsSendReady>
    10f6:	88 23       	and	r24, r24
						USART_Send(0x04, 0);
    10f8:	e1 f3       	breq	.-8      	; 0x10f2 <ActionTick+0x162>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	84 e0       	ldi	r24, 0x04	; 4
						while(!USART_HasTransmitted(0));
    10fe:	8b d8       	rcall	.-3818   	; 0x216 <USART_Send>
    1100:	00 00       	nop
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	40 d8       	rcall	.-3968   	; 0x186 <USART_HasTransmitted>
    1106:	88 23       	and	r24, r24
						asm("nop"); 
    1108:	e1 f3       	breq	.-8      	; 0x1102 <ActionTick+0x172>
						
						while(!USART_IsSendReady(0));
    110a:	00 00       	nop
    110c:	00 00       	nop
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	22 d8       	rcall	.-4028   	; 0x156 <USART_IsSendReady>
						USART_Send(2 * playerPosition[1], 0);
    1112:	88 23       	and	r24, r24
    1114:	e1 f3       	breq	.-8      	; 0x110e <ActionTick+0x17e>
    1116:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
						while(!USART_HasTransmitted(0));
    111a:	88 0f       	add	r24, r24
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	7b d8       	rcall	.-3850   	; 0x216 <USART_Send>
    1120:	00 00       	nop
    1122:	80 e0       	ldi	r24, 0x00	; 0
						asm("nop");
    1124:	30 d8       	rcall	.-4000   	; 0x186 <USART_HasTransmitted>
						
						while(!USART_IsSendReady(0));
    1126:	88 23       	and	r24, r24
    1128:	e1 f3       	breq	.-8      	; 0x1122 <ActionTick+0x192>
    112a:	00 00       	nop
						USART_Send(2 * playerPosition[0], 0);
    112c:	00 00       	nop
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	12 d8       	rcall	.-4060   	; 0x156 <USART_IsSendReady>
    1132:	88 23       	and	r24, r24
						while(!USART_HasTransmitted(0));
    1134:	e1 f3       	breq	.-8      	; 0x112e <ActionTick+0x19e>
    1136:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    113a:	88 0f       	add	r24, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
						asm("nop");
    113e:	6b d8       	rcall	.-3882   	; 0x216 <USART_Send>
    1140:	00 00       	nop
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	20 d8       	rcall	.-4032   	; 0x186 <USART_HasTransmitted>
    1146:	88 23       	and	r24, r24
    1148:	e1 f3       	breq	.-8      	; 0x1142 <ActionTick+0x1b2>
    114a:	00 00       	nop
    114c:	27 dc       	rcall	.-1970   	; 0x99c <MotorThumbsDown>
    114e:	33 c1       	rjmp	.+614    	; 0x13b6 <ActionTick+0x426>
    1150:	00 00       	nop
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	00 d8       	rcall	.-4096   	; 0x156 <USART_IsSendReady>
    1156:	88 23       	and	r24, r24
    1158:	e1 f3       	breq	.-8      	; 0x1152 <ActionTick+0x1c2>
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	5b d8       	rcall	.-3914   	; 0x216 <USART_Send>
    1160:	00 00       	nop
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	10 d8       	rcall	.-4064   	; 0x186 <USART_HasTransmitted>
    1166:	88 23       	and	r24, r24
    1168:	e1 f3       	breq	.-8      	; 0x1162 <ActionTick+0x1d2>
    116a:	00 00       	nop
    116c:	00 00       	nop
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    1174:	88 23       	and	r24, r24
    1176:	d9 f3       	breq	.-10     	; 0x116e <ActionTick+0x1de>
    1178:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    117c:	88 0f       	add	r24, r24
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	4a d8       	rcall	.-3948   	; 0x216 <USART_Send>
    1182:	00 00       	nop
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    118a:	88 23       	and	r24, r24
    118c:	d9 f3       	breq	.-10     	; 0x1184 <ActionTick+0x1f4>
    118e:	00 00       	nop
    1190:	00 00       	nop
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    1198:	88 23       	and	r24, r24
    119a:	d9 f3       	breq	.-10     	; 0x1192 <ActionTick+0x202>
    119c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    11a0:	88 0f       	add	r24, r24
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	38 d8       	rcall	.-3984   	; 0x216 <USART_Send>
    11a6:	00 00       	nop
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    11ae:	88 23       	and	r24, r24
    11b0:	d9 f3       	breq	.-10     	; 0x11a8 <ActionTick+0x218>
    11b2:	00 00       	nop
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <playerPosition>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <playerPosition+0x1>
    11c0:	00 00       	nop
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    11c8:	88 23       	and	r24, r24
    11ca:	d9 f3       	breq	.-10     	; 0x11c2 <ActionTick+0x232>
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	82 e6       	ldi	r24, 0x62	; 98
    11d0:	22 d8       	rcall	.-4028   	; 0x216 <USART_Send>
    11d2:	00 00       	nop
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    11da:	88 23       	and	r24, r24
    11dc:	d9 f3       	breq	.-10     	; 0x11d4 <ActionTick+0x244>
    11de:	00 00       	nop
    11e0:	00 00       	nop
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    11e8:	88 23       	and	r24, r24
    11ea:	d9 f3       	breq	.-10     	; 0x11e2 <ActionTick+0x252>
    11ec:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    11f0:	88 0f       	add	r24, r24
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	10 d8       	rcall	.-4064   	; 0x216 <USART_Send>
    11f6:	00 00       	nop
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    11fe:	88 23       	and	r24, r24
    1200:	d9 f3       	breq	.-10     	; 0x11f8 <ActionTick+0x268>
    1202:	00 00       	nop
    1204:	00 00       	nop
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    120c:	88 23       	and	r24, r24
    120e:	d9 f3       	breq	.-10     	; 0x1206 <ActionTick+0x276>
    1210:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    1214:	88 0f       	add	r24, r24
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    121c:	00 00       	nop
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    1224:	88 23       	and	r24, r24
    1226:	d9 f3       	breq	.-10     	; 0x121e <ActionTick+0x28e>
    1228:	00 00       	nop
    122a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    122e:	88 30       	cpi	r24, 0x08	; 8
    1230:	28 f4       	brcc	.+10     	; 0x123c <ActionTick+0x2ac>
    1232:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    1236:	80 31       	cpi	r24, 0x10	; 16
    1238:	08 f4       	brcc	.+2      	; 0x123c <ActionTick+0x2ac>
    123a:	56 c0       	rjmp	.+172    	; 0x12e8 <ActionTick+0x358>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <head>
    1242:	00 00       	nop
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    124a:	88 23       	and	r24, r24
    124c:	d9 f3       	breq	.-10     	; 0x1244 <ActionTick+0x2b4>
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    1256:	00 00       	nop
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    125e:	88 23       	and	r24, r24
    1260:	d9 f3       	breq	.-10     	; 0x1258 <ActionTick+0x2c8>
    1262:	00 00       	nop
    1264:	00 00       	nop
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    126c:	88 23       	and	r24, r24
    126e:	d9 f3       	breq	.-10     	; 0x1266 <ActionTick+0x2d6>
    1270:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <actionMoves+0x1>
    127c:	08 2e       	mov	r0, r24
    127e:	00 0c       	add	r0, r0
    1280:	99 0b       	sbc	r25, r25
    1282:	a9 01       	movw	r20, r18
    1284:	48 1b       	sub	r20, r24
    1286:	59 0b       	sbc	r21, r25
    1288:	ca 01       	movw	r24, r20
    128a:	88 0f       	add	r24, r24
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    1292:	00 00       	nop
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    129a:	88 23       	and	r24, r24
    129c:	d9 f3       	breq	.-10     	; 0x1294 <ActionTick+0x304>
    129e:	00 00       	nop
    12a0:	00 00       	nop
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    12a8:	88 23       	and	r24, r24
    12aa:	d9 f3       	breq	.-10     	; 0x12a2 <ActionTick+0x312>
    12ac:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <actionMoves>
    12b8:	08 2e       	mov	r0, r24
    12ba:	00 0c       	add	r0, r0
    12bc:	99 0b       	sbc	r25, r25
    12be:	f9 01       	movw	r30, r18
    12c0:	e8 1b       	sub	r30, r24
    12c2:	f9 0b       	sbc	r31, r25
    12c4:	cf 01       	movw	r24, r30
    12c6:	88 0f       	add	r24, r24
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    12ce:	00 00       	nop
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    12d6:	88 23       	and	r24, r24
    12d8:	d9 f3       	breq	.-10     	; 0x12d0 <ActionTick+0x340>
    12da:	00 00       	nop
    12dc:	5f db       	rcall	.-2370   	; 0x99c <MotorThumbsDown>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9d 83       	std	Y+5, r25	; 0x05
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	63 c0       	rjmp	.+198    	; 0x13ae <ActionTick+0x41e>
    12e8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <currentLevel>
    12ec:	48 2f       	mov	r20, r24
    12ee:	88 0f       	add	r24, r24
    12f0:	55 0b       	sbc	r21, r21
    12f2:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	44 0f       	add	r20, r20
    1304:	55 1f       	adc	r21, r21
    1306:	44 0f       	add	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	24 0f       	add	r18, r20
    1310:	35 1f       	adc	r19, r21
    1312:	22 95       	swap	r18
    1314:	32 95       	swap	r19
    1316:	30 7f       	andi	r19, 0xF0	; 240
    1318:	32 27       	eor	r19, r18
    131a:	20 7f       	andi	r18, 0xF0	; 240
    131c:	32 27       	eor	r19, r18
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	86 5f       	subi	r24, 0xF6	; 246
    1324:	9e 4f       	sbci	r25, 0xFE	; 254
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <ActionTick+0x3a0>
    132e:	45 c0       	rjmp	.+138    	; 0x13ba <ActionTick+0x42a>
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <head>
    1336:	00 00       	nop
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    133e:	88 23       	and	r24, r24
    1340:	d9 f3       	breq	.-10     	; 0x1338 <ActionTick+0x3a8>
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    134a:	00 00       	nop
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    1352:	88 23       	and	r24, r24
    1354:	d9 f3       	breq	.-10     	; 0x134c <ActionTick+0x3bc>
    1356:	00 00       	nop
    1358:	00 00       	nop
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    1360:	88 23       	and	r24, r24
    1362:	d9 f3       	breq	.-10     	; 0x135a <ActionTick+0x3ca>
    1364:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <playerPosition+0x1>
    1368:	88 0f       	add	r24, r24
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    1370:	00 00       	nop
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    1378:	88 23       	and	r24, r24
    137a:	d9 f3       	breq	.-10     	; 0x1372 <ActionTick+0x3e2>
    137c:	00 00       	nop
    137e:	00 00       	nop
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
    1386:	88 23       	and	r24, r24
    1388:	d9 f3       	breq	.-10     	; 0x1380 <ActionTick+0x3f0>
    138a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <playerPosition>
    138e:	88 0f       	add	r24, r24
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 0b 01 	call	0x216	; 0x216 <USART_Send>
    1396:	00 00       	nop
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 c3 00 	call	0x186	; 0x186 <USART_HasTransmitted>
    139e:	88 23       	and	r24, r24
    13a0:	d9 f3       	breq	.-10     	; 0x1398 <ActionTick+0x408>
    13a2:	00 00       	nop
    13a4:	49 db       	rcall	.-2414   	; 0xa38 <MotorThumbsUp>
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9d 83       	std	Y+5, r25	; 0x05
    13ac:	8c 83       	std	Y+4, r24	; 0x04
    13ae:	00 00       	nop
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <ActionTick+0x42a>
    13b2:	00 00       	nop
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <ActionTick+0x42c>
    13b6:	00 00       	nop
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <ActionTick+0x42c>
    13ba:	00 00       	nop
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <main>:
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	2c 97       	sbiw	r28, 0x0c	; 12
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	81 e2       	ldi	r24, 0x21	; 33
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	10 82       	st	Z, r1
    13f0:	82 e2       	ldi	r24, 0x22	; 34
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
    13fa:	8a e2       	ldi	r24, 0x2A	; 42
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
    1404:	8b e2       	ldi	r24, 0x2B	; 43
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	fc 01       	movw	r30, r24
    140a:	10 82       	st	Z, r1
    140c:	8c e0       	ldi	r24, 0x0C	; 12
    140e:	eb e0       	ldi	r30, 0x0B	; 11
    1410:	f5 e0       	ldi	r31, 0x05	; 5
    1412:	a6 e8       	ldi	r26, 0x86	; 134
    1414:	b5 e0       	ldi	r27, 0x05	; 5
    1416:	01 90       	ld	r0, Z+
    1418:	0d 92       	st	X+, r0
    141a:	8a 95       	dec	r24
    141c:	e1 f7       	brne	.-8      	; 0x1416 <main+0x46>
    141e:	8c e0       	ldi	r24, 0x0C	; 12
    1420:	e7 e1       	ldi	r30, 0x17	; 23
    1422:	f5 e0       	ldi	r31, 0x05	; 5
    1424:	ac e6       	ldi	r26, 0x6C	; 108
    1426:	b5 e0       	ldi	r27, 0x05	; 5
    1428:	01 90       	ld	r0, Z+
    142a:	0d 92       	st	X+, r0
    142c:	8a 95       	dec	r24
    142e:	e1 f7       	brne	.-8      	; 0x1428 <main+0x58>
    1430:	8c e0       	ldi	r24, 0x0C	; 12
    1432:	e3 e2       	ldi	r30, 0x23	; 35
    1434:	f5 e0       	ldi	r31, 0x05	; 5
    1436:	a2 e9       	ldi	r26, 0x92	; 146
    1438:	b5 e0       	ldi	r27, 0x05	; 5
    143a:	01 90       	ld	r0, Z+
    143c:	0d 92       	st	X+, r0
    143e:	8a 95       	dec	r24
    1440:	e1 f7       	brne	.-8      	; 0x143a <main+0x6a>
    1442:	8c e0       	ldi	r24, 0x0C	; 12
    1444:	ef e2       	ldi	r30, 0x2F	; 47
    1446:	f5 e0       	ldi	r31, 0x05	; 5
    1448:	ae e5       	ldi	r26, 0x5E	; 94
    144a:	b5 e0       	ldi	r27, 0x05	; 5
    144c:	01 90       	ld	r0, Z+
    144e:	0d 92       	st	X+, r0
    1450:	8a 95       	dec	r24
    1452:	e1 f7       	brne	.-8      	; 0x144c <main+0x7c>
    1454:	8c e0       	ldi	r24, 0x0C	; 12
    1456:	eb e3       	ldi	r30, 0x3B	; 59
    1458:	f5 e0       	ldi	r31, 0x05	; 5
    145a:	aa e7       	ldi	r26, 0x7A	; 122
    145c:	b5 e0       	ldi	r27, 0x05	; 5
    145e:	01 90       	ld	r0, Z+
    1460:	0d 92       	st	X+, r0
    1462:	8a 95       	dec	r24
    1464:	e1 f7       	brne	.-8      	; 0x145e <main+0x8e>
    1466:	88 e0       	ldi	r24, 0x08	; 8
    1468:	e7 e4       	ldi	r30, 0x47	; 71
    146a:	f5 e0       	ldi	r31, 0x05	; 5
    146c:	de 01       	movw	r26, r28
    146e:	15 96       	adiw	r26, 0x05	; 5
    1470:	01 90       	ld	r0, Z+
    1472:	0d 92       	st	X+, r0
    1474:	8a 95       	dec	r24
    1476:	e1 f7       	brne	.-8      	; 0x1470 <main+0xa0>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	cc 01       	movw	r24, r24
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	af d8       	rcall	.-3746   	; 0x5ee <TimerSet>
    1490:	dc d8       	rcall	.-3656   	; 0x64a <TimerOn>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	0e 94 66 00 	call	0xcc	; 0xcc <initUSART>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_Flush>
    149e:	0e 94 3c 01 	call	0x278	; 0x278 <joystickInit>
    14a2:	8a e0       	ldi	r24, 0x0A	; 10
    14a4:	72 d9       	rcall	.-3356   	; 0x78a <QueueInit>
    14a6:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <moveStack+0x1>
    14aa:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <moveStack>
    14ae:	0e 94 55 01 	call	0x2aa	; 0x2aa <joystickSample>
    14b2:	1a 82       	std	Y+2, r1	; 0x02
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	b5 c0       	rjmp	.+362    	; 0x1622 <main+0x252>
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	9e 01       	movw	r18, r28
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	82 0f       	add	r24, r18
    14c8:	93 1f       	adc	r25, r19
    14ca:	04 96       	adiw	r24, 0x04	; 4
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	fc 01       	movw	r30, r24
    14d4:	83 85       	ldd	r24, Z+11	; 0x0b
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <main+0x10c>
    14da:	9d c0       	rjmp	.+314    	; 0x1616 <main+0x246>
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	9e 01       	movw	r18, r28
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	04 96       	adiw	r24, 0x04	; 4
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	fc 01       	movw	r30, r24
    14f8:	25 81       	ldd	r18, Z+5	; 0x05
    14fa:	36 81       	ldd	r19, Z+6	; 0x06
    14fc:	47 81       	ldd	r20, Z+7	; 0x07
    14fe:	50 85       	ldd	r21, Z+8	; 0x08
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	be 01       	movw	r22, r28
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	86 0f       	add	r24, r22
    1510:	97 1f       	adc	r25, r23
    1512:	04 96       	adiw	r24, 0x04	; 4
    1514:	fc 01       	movw	r30, r24
    1516:	80 81       	ld	r24, Z
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	fc 01       	movw	r30, r24
    151c:	81 81       	ldd	r24, Z+1	; 0x01
    151e:	92 81       	ldd	r25, Z+2	; 0x02
    1520:	a3 81       	ldd	r26, Z+3	; 0x03
    1522:	b4 81       	ldd	r27, Z+4	; 0x04
    1524:	28 17       	cp	r18, r24
    1526:	39 07       	cpc	r19, r25
    1528:	4a 07       	cpc	r20, r26
    152a:	5b 07       	cpc	r21, r27
    152c:	08 f4       	brcc	.+2      	; 0x1530 <main+0x160>
    152e:	45 c0       	rjmp	.+138    	; 0x15ba <main+0x1ea>
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	9e 01       	movw	r18, r28
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	04 96       	adiw	r24, 0x04	; 4
    1544:	fc 01       	movw	r30, r24
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	fc 01       	movw	r30, r24
    154c:	15 82       	std	Z+5, r1	; 0x05
    154e:	16 82       	std	Z+6, r1	; 0x06
    1550:	17 82       	std	Z+7, r1	; 0x07
    1552:	10 86       	std	Z+8, r1	; 0x08
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	9e 01       	movw	r18, r28
    155e:	2f 5f       	subi	r18, 0xFF	; 255
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	82 0f       	add	r24, r18
    1564:	93 1f       	adc	r25, r19
    1566:	04 96       	adiw	r24, 0x04	; 4
    1568:	fc 01       	movw	r30, r24
    156a:	00 81       	ld	r16, Z
    156c:	11 81       	ldd	r17, Z+1	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	9e 01       	movw	r18, r28
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	82 0f       	add	r24, r18
    157e:	93 1f       	adc	r25, r19
    1580:	04 96       	adiw	r24, 0x04	; 4
    1582:	fc 01       	movw	r30, r24
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	fc 01       	movw	r30, r24
    158a:	21 85       	ldd	r18, Z+9	; 0x09
    158c:	32 85       	ldd	r19, Z+10	; 0x0a
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	ae 01       	movw	r20, r28
    1598:	4f 5f       	subi	r20, 0xFF	; 255
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    159c:	84 0f       	add	r24, r20
    159e:	95 1f       	adc	r25, r21
    15a0:	04 96       	adiw	r24, 0x04	; 4
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	08 2e       	mov	r0, r24
    15ae:	00 0c       	add	r0, r0
    15b0:	99 0b       	sbc	r25, r25
    15b2:	f9 01       	movw	r30, r18
    15b4:	09 95       	icall
    15b6:	f8 01       	movw	r30, r16
    15b8:	80 83       	st	Z, r24
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	9e 01       	movw	r18, r28
    15c4:	2f 5f       	subi	r18, 0xFF	; 255
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	04 96       	adiw	r24, 0x04	; 4
    15ce:	fc 01       	movw	r30, r24
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	9e 01       	movw	r18, r28
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	04 96       	adiw	r24, 0x04	; 4
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	fc 01       	movw	r30, r24
    15f0:	25 81       	ldd	r18, Z+5	; 0x05
    15f2:	36 81       	ldd	r19, Z+6	; 0x06
    15f4:	47 81       	ldd	r20, Z+7	; 0x07
    15f6:	50 85       	ldd	r21, Z+8	; 0x08
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	cc 01       	movw	r24, r24
    15fe:	a0 e0       	ldi	r26, 0x00	; 0
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	82 0f       	add	r24, r18
    1604:	93 1f       	adc	r25, r19
    1606:	a4 1f       	adc	r26, r20
    1608:	b5 1f       	adc	r27, r21
    160a:	fb 01       	movw	r30, r22
    160c:	85 83       	std	Z+5, r24	; 0x05
    160e:	96 83       	std	Z+6, r25	; 0x06
    1610:	a7 83       	std	Z+7, r26	; 0x07
    1612:	b0 87       	std	Z+8, r27	; 0x08
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <main+0x248>
    1616:	00 00       	nop
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	04 97       	sbiw	r24, 0x04	; 4
    1628:	0c f4       	brge	.+2      	; 0x162c <main+0x25c>
    162a:	46 cf       	rjmp	.-372    	; 0x14b8 <main+0xe8>
    162c:	00 00       	nop
    162e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <__data_end>
    1632:	88 23       	and	r24, r24
    1634:	e1 f3       	breq	.-8      	; 0x162e <main+0x25e>
    1636:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <__data_end>
    163a:	39 cf       	rjmp	.-398    	; 0x14ae <main+0xde>

0000163c <__udivmodqi4>:
    163c:	99 1b       	sub	r25, r25
    163e:	79 e0       	ldi	r23, 0x09	; 9
    1640:	04 c0       	rjmp	.+8      	; 0x164a <__udivmodqi4_ep>

00001642 <__udivmodqi4_loop>:
    1642:	99 1f       	adc	r25, r25
    1644:	96 17       	cp	r25, r22
    1646:	08 f0       	brcs	.+2      	; 0x164a <__udivmodqi4_ep>
    1648:	96 1b       	sub	r25, r22

0000164a <__udivmodqi4_ep>:
    164a:	88 1f       	adc	r24, r24
    164c:	7a 95       	dec	r23
    164e:	c9 f7       	brne	.-14     	; 0x1642 <__udivmodqi4_loop>
    1650:	80 95       	com	r24
    1652:	08 95       	ret

00001654 <__muldi3>:
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	1f 93       	push	r17
    165a:	0f 93       	push	r16
    165c:	9a 9d       	mul	r25, r10
    165e:	f0 2d       	mov	r31, r0
    1660:	21 9f       	mul	r18, r17
    1662:	f0 0d       	add	r31, r0
    1664:	8b 9d       	mul	r24, r11
    1666:	f0 0d       	add	r31, r0
    1668:	8a 9d       	mul	r24, r10
    166a:	e0 2d       	mov	r30, r0
    166c:	f1 0d       	add	r31, r1
    166e:	03 9f       	mul	r16, r19
    1670:	f0 0d       	add	r31, r0
    1672:	02 9f       	mul	r16, r18
    1674:	e0 0d       	add	r30, r0
    1676:	f1 1d       	adc	r31, r1
    1678:	4e 9d       	mul	r20, r14
    167a:	e0 0d       	add	r30, r0
    167c:	f1 1d       	adc	r31, r1
    167e:	5e 9d       	mul	r21, r14
    1680:	f0 0d       	add	r31, r0
    1682:	4f 9d       	mul	r20, r15
    1684:	f0 0d       	add	r31, r0
    1686:	7f 93       	push	r23
    1688:	6f 93       	push	r22
    168a:	bf 92       	push	r11
    168c:	af 92       	push	r10
    168e:	5f 93       	push	r21
    1690:	4f 93       	push	r20
    1692:	d5 01       	movw	r26, r10
    1694:	39 d0       	rcall	.+114    	; 0x1708 <__umulhisi3>
    1696:	8b 01       	movw	r16, r22
    1698:	ac 01       	movw	r20, r24
    169a:	d7 01       	movw	r26, r14
    169c:	35 d0       	rcall	.+106    	; 0x1708 <__umulhisi3>
    169e:	eb 01       	movw	r28, r22
    16a0:	e8 0f       	add	r30, r24
    16a2:	f9 1f       	adc	r31, r25
    16a4:	d6 01       	movw	r26, r12
    16a6:	1f d0       	rcall	.+62     	; 0x16e6 <__muldi3_6>
    16a8:	2f 91       	pop	r18
    16aa:	3f 91       	pop	r19
    16ac:	d6 01       	movw	r26, r12
    16ae:	2c d0       	rcall	.+88     	; 0x1708 <__umulhisi3>
    16b0:	c6 0f       	add	r28, r22
    16b2:	d7 1f       	adc	r29, r23
    16b4:	e8 1f       	adc	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	af 91       	pop	r26
    16ba:	bf 91       	pop	r27
    16bc:	14 d0       	rcall	.+40     	; 0x16e6 <__muldi3_6>
    16be:	2f 91       	pop	r18
    16c0:	3f 91       	pop	r19
    16c2:	22 d0       	rcall	.+68     	; 0x1708 <__umulhisi3>
    16c4:	c6 0f       	add	r28, r22
    16c6:	d7 1f       	adc	r29, r23
    16c8:	e8 1f       	adc	r30, r24
    16ca:	f9 1f       	adc	r31, r25
    16cc:	d6 01       	movw	r26, r12
    16ce:	1c d0       	rcall	.+56     	; 0x1708 <__umulhisi3>
    16d0:	e6 0f       	add	r30, r22
    16d2:	f7 1f       	adc	r31, r23
    16d4:	98 01       	movw	r18, r16
    16d6:	be 01       	movw	r22, r28
    16d8:	cf 01       	movw	r24, r30
    16da:	11 24       	eor	r1, r1
    16dc:	0f 91       	pop	r16
    16de:	1f 91       	pop	r17
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <__muldi3_6>:
    16e6:	10 d0       	rcall	.+32     	; 0x1708 <__umulhisi3>
    16e8:	46 0f       	add	r20, r22
    16ea:	57 1f       	adc	r21, r23
    16ec:	c8 1f       	adc	r28, r24
    16ee:	d9 1f       	adc	r29, r25
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <__muldi3_6+0xe>
    16f2:	31 96       	adiw	r30, 0x01	; 1
    16f4:	08 95       	ret

000016f6 <__adddi3>:
    16f6:	2a 0d       	add	r18, r10
    16f8:	3b 1d       	adc	r19, r11
    16fa:	4c 1d       	adc	r20, r12
    16fc:	5d 1d       	adc	r21, r13
    16fe:	6e 1d       	adc	r22, r14
    1700:	7f 1d       	adc	r23, r15
    1702:	80 1f       	adc	r24, r16
    1704:	91 1f       	adc	r25, r17
    1706:	08 95       	ret

00001708 <__umulhisi3>:
    1708:	a2 9f       	mul	r26, r18
    170a:	b0 01       	movw	r22, r0
    170c:	b3 9f       	mul	r27, r19
    170e:	c0 01       	movw	r24, r0
    1710:	a3 9f       	mul	r26, r19
    1712:	70 0d       	add	r23, r0
    1714:	81 1d       	adc	r24, r1
    1716:	11 24       	eor	r1, r1
    1718:	91 1d       	adc	r25, r1
    171a:	b2 9f       	mul	r27, r18
    171c:	70 0d       	add	r23, r0
    171e:	81 1d       	adc	r24, r1
    1720:	11 24       	eor	r1, r1
    1722:	91 1d       	adc	r25, r1
    1724:	08 95       	ret

00001726 <malloc>:
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	91 05       	cpc	r25, r1
    1732:	10 f4       	brcc	.+4      	; 0x1738 <malloc+0x12>
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	e0 91 a3 05 	lds	r30, 0x05A3	; 0x8005a3 <__flp>
    173c:	f0 91 a4 05 	lds	r31, 0x05A4	; 0x8005a4 <__flp+0x1>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	19 f1       	breq	.+70     	; 0x1792 <malloc+0x6c>
    174c:	40 81       	ld	r20, Z
    174e:	51 81       	ldd	r21, Z+1	; 0x01
    1750:	02 81       	ldd	r16, Z+2	; 0x02
    1752:	13 81       	ldd	r17, Z+3	; 0x03
    1754:	48 17       	cp	r20, r24
    1756:	59 07       	cpc	r21, r25
    1758:	c8 f0       	brcs	.+50     	; 0x178c <malloc+0x66>
    175a:	84 17       	cp	r24, r20
    175c:	95 07       	cpc	r25, r21
    175e:	69 f4       	brne	.+26     	; 0x177a <malloc+0x54>
    1760:	10 97       	sbiw	r26, 0x00	; 0
    1762:	31 f0       	breq	.+12     	; 0x1770 <malloc+0x4a>
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	0c 93       	st	X, r16
    1768:	12 97       	sbiw	r26, 0x02	; 2
    176a:	13 96       	adiw	r26, 0x03	; 3
    176c:	1c 93       	st	X, r17
    176e:	27 c0       	rjmp	.+78     	; 0x17be <malloc+0x98>
    1770:	00 93 a3 05 	sts	0x05A3, r16	; 0x8005a3 <__flp>
    1774:	10 93 a4 05 	sts	0x05A4, r17	; 0x8005a4 <__flp+0x1>
    1778:	22 c0       	rjmp	.+68     	; 0x17be <malloc+0x98>
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	19 f0       	breq	.+6      	; 0x1786 <malloc+0x60>
    1780:	42 17       	cp	r20, r18
    1782:	53 07       	cpc	r21, r19
    1784:	18 f4       	brcc	.+6      	; 0x178c <malloc+0x66>
    1786:	9a 01       	movw	r18, r20
    1788:	bd 01       	movw	r22, r26
    178a:	ef 01       	movw	r28, r30
    178c:	df 01       	movw	r26, r30
    178e:	f8 01       	movw	r30, r16
    1790:	db cf       	rjmp	.-74     	; 0x1748 <malloc+0x22>
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	f9 f0       	breq	.+62     	; 0x17d6 <malloc+0xb0>
    1798:	28 1b       	sub	r18, r24
    179a:	39 0b       	sbc	r19, r25
    179c:	24 30       	cpi	r18, 0x04	; 4
    179e:	31 05       	cpc	r19, r1
    17a0:	80 f4       	brcc	.+32     	; 0x17c2 <malloc+0x9c>
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	9b 81       	ldd	r25, Y+3	; 0x03
    17a6:	61 15       	cp	r22, r1
    17a8:	71 05       	cpc	r23, r1
    17aa:	21 f0       	breq	.+8      	; 0x17b4 <malloc+0x8e>
    17ac:	fb 01       	movw	r30, r22
    17ae:	93 83       	std	Z+3, r25	; 0x03
    17b0:	82 83       	std	Z+2, r24	; 0x02
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <malloc+0x96>
    17b4:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <__flp+0x1>
    17b8:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <__flp>
    17bc:	fe 01       	movw	r30, r28
    17be:	32 96       	adiw	r30, 0x02	; 2
    17c0:	44 c0       	rjmp	.+136    	; 0x184a <malloc+0x124>
    17c2:	fe 01       	movw	r30, r28
    17c4:	e2 0f       	add	r30, r18
    17c6:	f3 1f       	adc	r31, r19
    17c8:	81 93       	st	Z+, r24
    17ca:	91 93       	st	Z+, r25
    17cc:	22 50       	subi	r18, 0x02	; 2
    17ce:	31 09       	sbc	r19, r1
    17d0:	39 83       	std	Y+1, r19	; 0x01
    17d2:	28 83       	st	Y, r18
    17d4:	3a c0       	rjmp	.+116    	; 0x184a <malloc+0x124>
    17d6:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    17da:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    17de:	23 2b       	or	r18, r19
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <malloc+0xcc>
    17e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    17e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    17ea:	30 93 a2 05 	sts	0x05A2, r19	; 0x8005a2 <__brkval+0x1>
    17ee:	20 93 a1 05 	sts	0x05A1, r18	; 0x8005a1 <__brkval>
    17f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    17f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    17fa:	21 15       	cp	r18, r1
    17fc:	31 05       	cpc	r19, r1
    17fe:	41 f4       	brne	.+16     	; 0x1810 <malloc+0xea>
    1800:	2d b7       	in	r18, 0x3d	; 61
    1802:	3e b7       	in	r19, 0x3e	; 62
    1804:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1808:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    180c:	24 1b       	sub	r18, r20
    180e:	35 0b       	sbc	r19, r21
    1810:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <__brkval>
    1814:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <__brkval+0x1>
    1818:	e2 17       	cp	r30, r18
    181a:	f3 07       	cpc	r31, r19
    181c:	a0 f4       	brcc	.+40     	; 0x1846 <malloc+0x120>
    181e:	2e 1b       	sub	r18, r30
    1820:	3f 0b       	sbc	r19, r31
    1822:	28 17       	cp	r18, r24
    1824:	39 07       	cpc	r19, r25
    1826:	78 f0       	brcs	.+30     	; 0x1846 <malloc+0x120>
    1828:	ac 01       	movw	r20, r24
    182a:	4e 5f       	subi	r20, 0xFE	; 254
    182c:	5f 4f       	sbci	r21, 0xFF	; 255
    182e:	24 17       	cp	r18, r20
    1830:	35 07       	cpc	r19, r21
    1832:	48 f0       	brcs	.+18     	; 0x1846 <malloc+0x120>
    1834:	4e 0f       	add	r20, r30
    1836:	5f 1f       	adc	r21, r31
    1838:	50 93 a2 05 	sts	0x05A2, r21	; 0x8005a2 <__brkval+0x1>
    183c:	40 93 a1 05 	sts	0x05A1, r20	; 0x8005a1 <__brkval>
    1840:	81 93       	st	Z+, r24
    1842:	91 93       	st	Z+, r25
    1844:	02 c0       	rjmp	.+4      	; 0x184a <malloc+0x124>
    1846:	e0 e0       	ldi	r30, 0x00	; 0
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	cf 01       	movw	r24, r30
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	08 95       	ret

00001856 <free>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <free+0xa>
    185e:	81 c0       	rjmp	.+258    	; 0x1962 <free+0x10c>
    1860:	fc 01       	movw	r30, r24
    1862:	32 97       	sbiw	r30, 0x02	; 2
    1864:	13 82       	std	Z+3, r1	; 0x03
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	a0 91 a3 05 	lds	r26, 0x05A3	; 0x8005a3 <__flp>
    186c:	b0 91 a4 05 	lds	r27, 0x05A4	; 0x8005a4 <__flp+0x1>
    1870:	10 97       	sbiw	r26, 0x00	; 0
    1872:	81 f4       	brne	.+32     	; 0x1894 <free+0x3e>
    1874:	20 81       	ld	r18, Z
    1876:	31 81       	ldd	r19, Z+1	; 0x01
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    1880:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    1884:	28 17       	cp	r18, r24
    1886:	39 07       	cpc	r19, r25
    1888:	51 f5       	brne	.+84     	; 0x18de <free+0x88>
    188a:	f0 93 a2 05 	sts	0x05A2, r31	; 0x8005a2 <__brkval+0x1>
    188e:	e0 93 a1 05 	sts	0x05A1, r30	; 0x8005a1 <__brkval>
    1892:	67 c0       	rjmp	.+206    	; 0x1962 <free+0x10c>
    1894:	ed 01       	movw	r28, r26
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	ce 17       	cp	r28, r30
    189c:	df 07       	cpc	r29, r31
    189e:	40 f4       	brcc	.+16     	; 0x18b0 <free+0x5a>
    18a0:	4a 81       	ldd	r20, Y+2	; 0x02
    18a2:	5b 81       	ldd	r21, Y+3	; 0x03
    18a4:	9e 01       	movw	r18, r28
    18a6:	41 15       	cp	r20, r1
    18a8:	51 05       	cpc	r21, r1
    18aa:	f1 f0       	breq	.+60     	; 0x18e8 <free+0x92>
    18ac:	ea 01       	movw	r28, r20
    18ae:	f5 cf       	rjmp	.-22     	; 0x189a <free+0x44>
    18b0:	d3 83       	std	Z+3, r29	; 0x03
    18b2:	c2 83       	std	Z+2, r28	; 0x02
    18b4:	40 81       	ld	r20, Z
    18b6:	51 81       	ldd	r21, Z+1	; 0x01
    18b8:	84 0f       	add	r24, r20
    18ba:	95 1f       	adc	r25, r21
    18bc:	c8 17       	cp	r28, r24
    18be:	d9 07       	cpc	r29, r25
    18c0:	59 f4       	brne	.+22     	; 0x18d8 <free+0x82>
    18c2:	88 81       	ld	r24, Y
    18c4:	99 81       	ldd	r25, Y+1	; 0x01
    18c6:	84 0f       	add	r24, r20
    18c8:	95 1f       	adc	r25, r21
    18ca:	02 96       	adiw	r24, 0x02	; 2
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	93 83       	std	Z+3, r25	; 0x03
    18d6:	82 83       	std	Z+2, r24	; 0x02
    18d8:	21 15       	cp	r18, r1
    18da:	31 05       	cpc	r19, r1
    18dc:	29 f4       	brne	.+10     	; 0x18e8 <free+0x92>
    18de:	f0 93 a4 05 	sts	0x05A4, r31	; 0x8005a4 <__flp+0x1>
    18e2:	e0 93 a3 05 	sts	0x05A3, r30	; 0x8005a3 <__flp>
    18e6:	3d c0       	rjmp	.+122    	; 0x1962 <free+0x10c>
    18e8:	e9 01       	movw	r28, r18
    18ea:	fb 83       	std	Y+3, r31	; 0x03
    18ec:	ea 83       	std	Y+2, r30	; 0x02
    18ee:	49 91       	ld	r20, Y+
    18f0:	59 91       	ld	r21, Y+
    18f2:	c4 0f       	add	r28, r20
    18f4:	d5 1f       	adc	r29, r21
    18f6:	ec 17       	cp	r30, r28
    18f8:	fd 07       	cpc	r31, r29
    18fa:	61 f4       	brne	.+24     	; 0x1914 <free+0xbe>
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	84 0f       	add	r24, r20
    1902:	95 1f       	adc	r25, r21
    1904:	02 96       	adiw	r24, 0x02	; 2
    1906:	e9 01       	movw	r28, r18
    1908:	99 83       	std	Y+1, r25	; 0x01
    190a:	88 83       	st	Y, r24
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	e0 e0       	ldi	r30, 0x00	; 0
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	12 96       	adiw	r26, 0x02	; 2
    191a:	8d 91       	ld	r24, X+
    191c:	9c 91       	ld	r25, X
    191e:	13 97       	sbiw	r26, 0x03	; 3
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	19 f0       	breq	.+6      	; 0x192a <free+0xd4>
    1924:	fd 01       	movw	r30, r26
    1926:	dc 01       	movw	r26, r24
    1928:	f7 cf       	rjmp	.-18     	; 0x1918 <free+0xc2>
    192a:	8d 91       	ld	r24, X+
    192c:	9c 91       	ld	r25, X
    192e:	11 97       	sbiw	r26, 0x01	; 1
    1930:	9d 01       	movw	r18, r26
    1932:	2e 5f       	subi	r18, 0xFE	; 254
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <__brkval>
    193e:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <__brkval+0x1>
    1942:	28 17       	cp	r18, r24
    1944:	39 07       	cpc	r19, r25
    1946:	69 f4       	brne	.+26     	; 0x1962 <free+0x10c>
    1948:	30 97       	sbiw	r30, 0x00	; 0
    194a:	29 f4       	brne	.+10     	; 0x1956 <free+0x100>
    194c:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <__flp+0x1>
    1950:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <__flp>
    1954:	02 c0       	rjmp	.+4      	; 0x195a <free+0x104>
    1956:	13 82       	std	Z+3, r1	; 0x03
    1958:	12 82       	std	Z+2, r1	; 0x02
    195a:	b0 93 a2 05 	sts	0x05A2, r27	; 0x8005a2 <__brkval+0x1>
    195e:	a0 93 a1 05 	sts	0x05A1, r26	; 0x8005a1 <__brkval>
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <_exit>:
    1968:	f8 94       	cli

0000196a <__stop_program>:
    196a:	ff cf       	rjmp	.-2      	; 0x196a <__stop_program>
